[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "APL Study Group",
    "section": "",
    "text": "Check out the forum for meeting time and resources!\nYou’ll find here a walkthru of what will eventually be all the glyphs in Dyalog APL, in an order where no glyph is used in an example until it’s been introduced. So far there’s no prose – the explanations are purely through examples for now (but we’ll add prose later).\nThere’s also a Python equivalents notebook, which has explanations using python of some APL ideas, including bind/partial and APL operators (aka higher-order functions)."
  },
  {
    "objectID": "the_rest.html",
    "href": "the_rest.html",
    "title": "The rest of the glyphs",
    "section": "",
    "text": "]box on -style=max -trains=tree -fns=on\n\n┌→─────────────────────────────────────┐\n│Was ON -style=max -trains=tree -fns=on│\n└──────────────────────────────────────┘"
  },
  {
    "objectID": "the_rest.html#sets-and-stuff",
    "href": "the_rest.html#sets-and-stuff",
    "title": "The rest of the glyphs",
    "section": "Sets and stuff",
    "text": "Sets and stuff\n\n∊ (Epsilon)\n\nmonadic ∊ (Enlist)\n\n⎕←mat←2 3⍴⍳6\n\n┌→────┐\n↓1 2 3│\n│4 5 6│\n└~────┘\n\n\n\n\n∊ 0 mat (7 8) 'nine'\n\n┌→─────────────────────┐\n│0 1 2 3 4 5 6 7 8 nine│\n└+─────────────────────┘\n\n\n\n\n\ndyadic ∊ (Member of)\n\n'abc' 4 ∊ 4 'ab' 'abcd'\n\n┌→──┐\n│0 1│\n└~──┘\n\n\n\n\nmat←2 3⍴⍳6\nmat ∊ 6 2 7 4\n\n┌→────┐\n↓0 1 0│\n│1 0 1│\n└~────┘\n\n\n\n\n\n\n⍷ (Epsilon Underbar)\n\ndyadic ⍷ (Find)\n\n1 ⍷ 3 1 4 1 5 9 2\n\n┌→────────────┐\n│0 1 0 1 0 0 0│\n└~────────────┘\n\n\n\n\n1 4 ⍷ 3 1 4 1 5 9 2\n\n┌→────────────┐\n│0 1 0 0 0 0 0│\n└~────────────┘\n\n\n\n\n'ana' ⍷ 'Banana'\n\n┌→──────────┐\n│0 1 0 1 0 0│\n└~──────────┘\n\n\n\n\nX ← 2 2 ⍴ 0 1 1 0\nY ← 4 4 ⍴ 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0\nX Y\n\n┌→────────────────┐\n│ ┌→──┐ ┌→──────┐ │\n│ ↓0 1│ ↓0 1 0 0│ │\n│ │1 0│ │1 0 0 1│ │\n│ └~──┘ │0 0 1 0│ │\n│       │0 1 0 0│ │\n│       └~──────┘ │\n└∊────────────────┘\n\n\n\n\nX ⍷ Y\n\n┌→──────┐\n↓1 0 0 0│\n│0 0 1 0│\n│0 1 0 0│\n│0 0 0 0│\n└~──────┘\n\n\n\n\n\n\n∩ (Up shoe)\n\ndyadic ∩ (Intersection)\n\n'ABRA'∩'CAR'\n\n┌→──┐\n│ARA│\n└───┘\n\n\n\n\n22 'ab' 'fg' ∩ 'a' 'ab' 22\n\n┌→────────┐\n│    ┌→─┐ │\n│ 22 │ab│ │\n│    └──┘ │\n└∊────────┘\n\n\n\n\n\n\n∪ (Down shoe)\n\nmonadic ∪ (Unique)\n\na ← 2 3 4 2 3 4 5\n\n\n∪a\n\n┌→──────┐\n│2 3 4 5│\n└~──────┘\n\n\n\n\n(≠a)/a\n\n┌→──────┐\n│2 3 4 5│\n└~──────┘\n\n\n\n\n∪ 'ab' 'ba' 'ab' 1 1 2\n\n┌→──────────────┐\n│ ┌→─┐ ┌→─┐     │\n│ │ab│ │ba│ 1 2 │\n│ └──┘ └──┘     │\n└∊──────────────┘\n\n\n\n\n\ndyadic ∪ (Union)\n\n'ABRA'∪'CAR'\n\n┌→────┐\n│ABRAC│\n└─────┘\n\n\n\n\n22 'ab' 'fg' ∪ 'a' 'ab' 22\n\n┌→───────────────┐\n│    ┌→─┐ ┌→─┐   │\n│ 22 │ab│ │fg│ a │\n│    └──┘ └──┘ - │\n└∊───────────────┘"
  },
  {
    "objectID": "the_rest.html#sort-index",
    "href": "the_rest.html#sort-index",
    "title": "The rest of the glyphs",
    "section": "Sort / index",
    "text": "Sort / index\n\n⌷ (Squad)\n\nmonadic ⌷ (Materialise)\nFor ⌷ ⍵: If ⍵ is an array, returns ⍵. For a class/COM/.Net object, it materialises the items.\n\n\ndyadic ⌷ (Index)\n\nv ← 2×⍳12\n3⌷v\n\n \n6\n \n\n\n\n\n(⊂3 5) ⌷v\n\n┌→───┐\n│6 10│\n└~───┘\n\n\n\n\n⎕ ← mat ← 3 4 ⍴⍳12\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n2 3 ⌷ mat\n\n \n7\n \n\n\n\n\n\n\n⍒ (Grade Down)\n\nmonadic ⍒ (Grade Down)\n\n⍒ 33 11 44 66 22\n\n┌→────────┐\n│4 3 1 5 2│\n└~────────┘\n\n\n\n\na ← 33 11 44 66 22\n\n\na[⍒a]\n\n┌→─────────────┐\n│66 44 33 22 11│\n└~─────────────┘\n\n\n\n\na⌷⍨⊂⍒a\n\n┌→─────────────┐\n│66 44 33 22 11│\n└~─────────────┘\n\n\n\n{⍵[⍋⍵]} and {(⊂⍋⍵)⌷⍵} are sort idioms (special cased for performance)\n\nsort ← ⌷⍨∘⊂∘⍒⍨\n\n\nsort a\n\n┌→─────────────┐\n│66 44 33 22 11│\n└~─────────────┘\n\n\n\n\ntsort ← (⊂∘⍒)⌷⊢  ⍝ h/t Rory Kemp\n\n\ntsort a\n\n┌→─────────────┐\n│66 44 33 22 11│\n└~─────────────┘\n\n\n\n\n\ndyadic ⍒ (Dyadic Grade Down)\n\na ← 'abcdefgabcdefg'\n\n\nb ← 'cgf' ⍒ a\n\n\na⌷⍨⊂b\n\n┌→─────────────┐\n│abdeabdeffggcc│\n└──────────────┘\n\n\n\n\n\n\n⍋ (Grade Up)\n\nmonadic ⍋ (Grade Up)\n\n⍋ 33 11 44 66 22\n\n┌→────────┐\n│2 5 1 3 4│\n└~────────┘\n\n\n\n\na ← 33 11 44 66 22\n\n\na[⍋a]\n\n┌→─────────────┐\n│11 22 33 44 66│\n└~─────────────┘\n\n\n\n\na⌷⍨⊂⍋a\n\n┌→─────────────┐\n│11 22 33 44 66│\n└~─────────────┘\n\n\n\n\n\ndyadic ⍒ (Dyadic Grade Down)\n\na ← 'abcdefgabcdefg'\nb ← 'cgf' ⍋ a\na⌷⍨⊂b\n\n┌→─────────────┐\n│ccggffabdeabde│\n└──────────────┘"
  },
  {
    "objectID": "the_rest.html#rotate-transpose-flip",
    "href": "the_rest.html#rotate-transpose-flip",
    "title": "The rest of the glyphs",
    "section": "Rotate / transpose / flip",
    "text": "Rotate / transpose / flip\n\n⌽ (Circle Stile)\n\nmonadic ⌽ (Reverse)\n\n⌽ 'trams'\n\n┌→────┐\n│smart│\n└─────┘\n\n\n\n\n⎕ ← mat ← 3 4 ⍴⍳12\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n⌽ mat\n\n┌→─────────┐\n↓ 4  3  2 1│\n│ 8  7  6 5│\n│12 11 10 9│\n└~─────────┘\n\n\n\n\n\ndyadic ⌽ (Rotate)\n\n1 ⌽ 'HatStand'\n\n┌→───────┐\n│atStandH│\n└────────┘\n\n\n\n\n3 ⌽ 'HatStand'\n\n┌→───────┐\n│StandHat│\n└────────┘\n\n\n\n\n¯2 ⌽ 1 2 3 4 5 6\n\n┌→──────────┐\n│5 6 1 2 3 4│\n└~──────────┘\n\n\n\n\n⎕ ← mat ← 3 4 ⍴⍳12\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n¯1 ⌽ mat\n\n┌→─────────┐\n↓ 4 1  2  3│\n│ 8 5  6  7│\n│12 9 10 11│\n└~─────────┘\n\n\n\n\n1 ¯1 2 ⌽ mat\n\n┌→─────────┐\n↓ 2  3 4  1│\n│ 8  5 6  7│\n│11 12 9 10│\n└~─────────┘\n\n\n\n\n\n\n⊖ (Circle Bar)\n\nmonadic ⊖ (Reverse First)\n\n⊖ 'trams'\n\n┌→────┐\n│smart│\n└─────┘\n\n\n\n\nmat ← 3 4 ⍴⍳12\n⊖ mat\n\n┌→─────────┐\n↓9 10 11 12│\n│5  6  7  8│\n│1  2  3  4│\n└~─────────┘\n\n\n\n\n\ndyadic ⊖ (Rotate First)\n\n3 ⊖ 'HatStand'\n\n┌→───────┐\n│StandHat│\n└────────┘\n\n\n\n\nmat ← 3 4 ⍴⍳12\n¯1 ⊖ mat\n\n┌→─────────┐\n↓9 10 11 12│\n│1  2  3  4│\n│5  6  7  8│\n└~─────────┘\n\n\n\n\n\n\n⍉ (Circle Bar)\n\nmonadic ⍉ (Transpose)\n\nmat ← 3 4 ⍴⍳12\n⍉ mat\n\n┌→─────┐\n↓1 5  9│\n│2 6 10│\n│3 7 11│\n│4 8 12│\n└~─────┘\n\n\n\n\n⎕←cube ← 2 3 4 ⍴⍳24\n\n┌┌→──────────┐\n↓↓ 1  2  3  4│\n││ 5  6  7  8│\n││ 9 10 11 12│\n││           │\n││13 14 15 16│\n││17 18 19 20│\n││21 22 23 24│\n└└~──────────┘\n\n\n\n\n⍉ cube\n\n┌┌→────┐\n↓↓ 1 13│\n││ 5 17│\n││ 9 21│\n││     │\n││ 2 14│\n││ 6 18│\n││10 22│\n││     │\n││ 3 15│\n││ 7 19│\n││11 23│\n││     │\n││ 4 16│\n││ 8 20│\n││12 24│\n└└~────┘\n\n\n\n\n⍴⍉ cube\n\n┌→────┐\n│4 3 2│\n└~────┘\n\n\n\n\n\ndyadic ⊖ (Rotate First)\n\nmat ← 3 4 ⍴⍳12\n2 1 ⍉ mat\n\n┌→─────┐\n↓1 5  9│\n│2 6 10│\n│3 7 11│\n│4 8 12│\n└~─────┘\n\n\n\n\n1 1 ⍉ mat\n\n┌→─────┐\n│1 6 11│\n└~─────┘\n\n\n\n\n⎕ ← cube ← 2 3 4 ⍴⍳24\n\n┌┌→──────────┐\n↓↓ 1  2  3  4│\n││ 5  6  7  8│\n││ 9 10 11 12│\n││           │\n││13 14 15 16│\n││17 18 19 20│\n││21 22 23 24│\n└└~──────────┘\n\n\n\n\n⍴ 2 1 3 ⍉ cube\n\n┌→────┐\n│3 2 4│\n└~────┘\n\n\n\n\n1 1 1⍉ cube\n\n┌→───┐\n│1 18│\n└~───┘\n\n\n\n\n2 1 1⍉ cube\n\n┌→────┐\n↓ 1 13│\n│ 6 18│\n│11 23│\n└~────┘"
  },
  {
    "objectID": "the_rest.html#other-operators",
    "href": "the_rest.html#other-operators",
    "title": "The rest of the glyphs",
    "section": "Other operators",
    "text": "Other operators\n\n⌺ (Quad Diamond)\n\nDyadic operator ⌺ (Stencil)\n\n{⊂⍺ ⍵}⌺3 3⊢3 3⍴⍳12\n\n┌→──────────────────────────────────────────────────────────┐\n↓ ┌→──────────────┐  ┌→──────────────┐  ┌→───────────────┐  │\n│ │ ┌→──┐ ┌→────┐ │  │ ┌→──┐ ┌→────┐ │  │ ┌→───┐ ┌→────┐ │  │\n│ │ │1 1│ ↓0 0 0│ │  │ │1 0│ ↓0 0 0│ │  │ │1 ¯1│ ↓0 0 0│ │  │\n│ │ └~──┘ │0 1 2│ │  │ └~──┘ │1 2 3│ │  │ └~───┘ │2 3 0│ │  │\n│ │       │0 4 5│ │  │       │4 5 6│ │  │        │5 6 0│ │  │\n│ │       └~────┘ │  │       └~────┘ │  │        └~────┘ │  │\n│ └∊──────────────┘  └∊──────────────┘  └∊───────────────┘  │\n│ ┌→──────────────┐  ┌→──────────────┐  ┌→───────────────┐  │\n│ │ ┌→──┐ ┌→────┐ │  │ ┌→──┐ ┌→────┐ │  │ ┌→───┐ ┌→────┐ │  │\n│ │ │0 1│ ↓0 1 2│ │  │ │0 0│ ↓1 2 3│ │  │ │0 ¯1│ ↓2 3 0│ │  │\n│ │ └~──┘ │0 4 5│ │  │ └~──┘ │4 5 6│ │  │ └~───┘ │5 6 0│ │  │\n│ │       │0 7 8│ │  │       │7 8 9│ │  │        │8 9 0│ │  │\n│ │       └~────┘ │  │       └~────┘ │  │        └~────┘ │  │\n│ └∊──────────────┘  └∊──────────────┘  └∊───────────────┘  │\n│ ┌→───────────────┐ ┌→───────────────┐ ┌→────────────────┐ │\n│ │ ┌→───┐ ┌→────┐ │ │ ┌→───┐ ┌→────┐ │ │ ┌→────┐ ┌→────┐ │ │\n│ │ │¯1 1│ ↓0 4 5│ │ │ │¯1 0│ ↓4 5 6│ │ │ │¯1 ¯1│ ↓5 6 0│ │ │\n│ │ └~───┘ │0 7 8│ │ │ └~───┘ │7 8 9│ │ │ └~────┘ │8 9 0│ │ │\n│ │        │0 0 0│ │ │        │0 0 0│ │ │         │0 0 0│ │ │\n│ │        └~────┘ │ │        └~────┘ │ │         └~────┘ │ │\n│ └∊───────────────┘ └∊───────────────┘ └∊────────────────┘ │\n└∊──────────────────────────────────────────────────────────┘\n\n\n\n\ns←2 2⍴3 3 2 2    ⍝ 2x2 stride with 3x3 kernel\n({⊂⍵}⌺s)3 4⍴⍳12\n\n┌→────────────────────┐\n↓ ┌→────┐  ┌→────┐    │\n│ ↓0 0 0│  ↓0 0 0│    │\n│ │0 1 2│  │2 3 4│    │\n│ │0 5 6│  │6 7 8│    │\n│ └~────┘  └~────┘    │\n│ ┌→─────┐ ┌→───────┐ │\n│ ↓0 5  6│ ↓ 6  7  8│ │\n│ │0 9 10│ │10 11 12│ │\n│ │0 0  0│ │ 0  0  0│ │\n│ └~─────┘ └~───────┘ │\n└∊────────────────────┘\n\n\n\n\n\n\n@ (At)\n\nDyadic @ (At)\n\n(0@2 4) ⍳6\n\n┌→──────────┐\n│1 0 3 0 5 6│\n└~──────────┘\n\n\n\n\n(3 1@2 4) ⍳6\n\n┌→──────────┐\n│1 3 3 1 5 6│\n└~──────────┘\n\n\n\n\n÷@2 4 ⍳6\n\n┌→───────────────┐\n│1 0.5 3 0.25 5 6│\n└~───────────────┘\n\n\n\n\n10 (×@2 4) ⍳5\n\n┌→──────────┐\n│1 20 3 40 5│\n└~──────────┘\n\n\n\n\n0@(2∘|)⍳6\n\n┌→──────────┐\n│0 2 0 4 0 6│\n└~──────────┘\n\n\n\n\n⌽@(2∘|)⍳6\n\n┌→──────────┐\n│5 2 3 4 1 6│\n└~──────────┘"
  },
  {
    "objectID": "the_rest.html#special-non-math-glyphs",
    "href": "the_rest.html#special-non-math-glyphs",
    "title": "The rest of the glyphs",
    "section": "Special non-math glyphs",
    "text": "Special non-math glyphs\n\n& (Ampersand)\n\nMonadic & (Spawn)\n& spawns a new thread in which f is applied to its argument(s).\n\n÷&4   ⍝ Reciprocal in background\n\n\n\n\n→ (Branch)\nBranching is superseded by the more modern control structures such as :If … :EndIf.\n\n\n⍞ (Print without CR, or stdin)\nWhen ⍞ is assigned with a vector or a scalar, the array is displayed without the normal ending new-line character.\n\n⍞←'2+2' ⋄ ⍞←'=' ⋄ ⍞←2+2\n\n2+2=4\n\n\n\nWhen ⍞ is referenced, terminal input is expected without any specific prompt, and the response is returned as a character vector (however this doesn’t work in Jupyter).\n\n⎕←j ← 4 6 ⍴ '{     \"a\":1,\"b\":42}     '\n\n┌→─────┐\n↓{     │\n│\"a\":1,│\n│\"b\":42│\n│}     │\n└──────┘\n\n\n\n\n\n⍠ Variant\nUsed to pass options/variants to some system functions, such as JSON convert.\n\n⎕←mat←(⎕JSON⍠('Format' 'M'))j\n\n┌→────────────┐\n↓   ┌⊖┐ ┌⊖┐   │\n│ 0 │ │ │0│ 1 │\n│   └─┘ └~┘   │\n│   ┌→┐       │\n│ 1 │a│ 1   3 │\n│   └─┘       │\n│   ┌→┐       │\n│ 1 │b│ 42  3 │\n│   └─┘       │\n└∊────────────┘\n\n\n\n\n1(⎕JSON⍠('Format' 'M')) mat\n\n┌→─────────────┐\n│{\"a\":1,\"b\":42}│\n└──────────────┘\n\n\n\n\n\n⌶ (I-Beam)\nI-Beam is a monadic operator that provides a range of system related services. WARNING: Although documentation is provided for I-Beam functions, any service provided using I-Beam should be considered as “experimental” and subject to change. As at Aug-2022 services include SVD, probability distributions, and much more.\n\n\n⍎ (Hydrant)\n\nMonadic ⍎ (Execute expression)\n\n⍎ '1+1'\n\n \n2\n \n\n\n\n\nV ← 1 2 3\n⍎ 'V'\n\n┌→────┐\n│1 2 3│\n└~────┘\n\n\n\n\nA← ⍎'1+1 ⋄ 2+2'\n\n \n2\n \n\n\n\n\nA\n\n \n4\n \n\n\n\n\n\nDyadic ⍎ (Execute expression in given namespace)\nX must be a namespace reference or a simple character scalar or vector representing the name of a namespace in which the expression is to be executed.\n\n\n\n⍕ (Thorn)\n\nMonadic ⍕ (Format)\n\n4 5 6  ⍝ These are numbers (see the `~` in bottom left)\n\n┌→────┐\n│4 5 6│\n└~────┘\n\n\n\n\n⍕ 4 5 6  ⍝ These are characters (no `~` in bottom left)\n\n┌→────┐\n│4 5 6│\n└─────┘\n\n\n\n\n\nDyadic ⍕ (Format By Specification)\nField-width and number of decimal places:\n\n6 2 ⍕ 3.125 0.002\n\n┌→───────────┐\n│  3.13  0.00│\n└────────────┘"
  },
  {
    "objectID": "competition.html",
    "href": "competition.html",
    "title": "APL Competition 2022",
    "section": "",
    "text": "This notebook covers useful glyphs and concepts useful for the 2022 Dyalog APL competition. Be sure to read the Basics and Operators notebooks first."
  },
  {
    "objectID": "competition.html#glpyhs",
    "href": "competition.html#glpyhs",
    "title": "APL Competition 2022",
    "section": "Glpyhs",
    "text": "Glpyhs\n\n↑ (Up arrow)\n\nmonadic ↑ (Mix)\nMix takes elements of a complex array and stacks them along rows.\n\n'Hip' 'Hop'\n\n┌→────────────┐\n│ ┌→──┐ ┌→──┐ │\n│ │Hip│ │Hop│ │\n│ └───┘ └───┘ │\n└∊────────────┘\n\n\n\n\n↑ 'Hip' 'Hop'\n\n┌→──┐\n↓Hip│\n│Hop│\n└───┘\n\n\n\n\n⍴↑ 'Hip' 'Hop'\n\n┌→──┐\n│2 3│\n└~──┘\n\n\n\nIf elements are not all the same length, Mix will pad as needed\n\n'Hip' 'Hop' 'Dance'\n\n┌→────────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→────┐ │\n│ │Hip│ │Hop│ │Dance│ │\n│ └───┘ └───┘ └─────┘ │\n└∊────────────────────┘\n\n\n\n\n↑ 'Hip' 'Hop' 'Dance'\n\n┌→────┐\n↓Hip  │\n│Hop  │\n│Dance│\n└─────┘\n\n\n\n\n⍴↑ 'Hip' 'Hop' 'Dance'\n\n┌→──┐\n│3 5│\n└~──┘\n\n\n\nArrays can be mixed arrays containing both simple scalars and nested arrays\n\n(6 4) 5 3\n↑ (6 4) 5 3\n\n┌→──────────┐\n│ ┌→──┐     │\n│ │6 4│ 5 3 │\n│ └~──┘     │\n└∊──────────┘\n\n\n\n┌→──┐\n↓6 4│\n│5 0│\n│3 0│\n└~──┘\n\n\n\n\n(1 2) 3 (4 5 6)\n↑(1 2) 3 (4 5 6)\n\n┌→────────────────┐\n│ ┌→──┐   ┌→────┐ │\n│ │1 2│ 3 │4 5 6│ │\n│ └~──┘   └~────┘ │\n└∊────────────────┘\n\n\n\n┌→────┐\n↓1 2 0│\n│3 0 0│\n│4 5 6│\n└~────┘\n\n\n\n\n\ndyadic ↑ (Take)\nIf ⍵ (right argument) is positive, returns the first ⍵ (right argument) elements of ⍺ (left argument)\n\n4 ↑ 'Pineapple'\n\n┌→───┐\n│Pine│\n└────┘\n\n\n\nIf ⍺ (left argument) is longer than the length of ⍵ (right argument), ⍵ is padded with blanks\n\n12 ↑ 'Pineapple'\n\n┌→───────────┐\n│Pineapple   │\n└────────────┘\n\n\n\nIf ⍵ (right argument) is negative, it returns the last elements rather than the first elements.\n\n¯5 ↑ 'Pineapple'\n\n┌→────┐\n│apple│\n└─────┘\n\n\n\nWhen ⍺ (left argument) is a scalar ⍵ (right argument) indexes on the first axis. The same rules apply to padding and negative numbers with higher dimension arrays.\n\n⎕←mat←3 4⍴⍳12\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n2 ↑ mat\n\n┌→──────┐\n↓1 2 3 4│\n│5 6 7 8│\n└~──────┘\n\n\n\n\n¯2 ↑ mat\n\n┌→─────────┐\n↓5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n5 ↑ mat\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n│0  0  0  0│\n│0  0  0  0│\n└~─────────┘\n\n\n\nWhen an array is passed to ⍺ (left argument) you can slice on more than just the first axis. For example, 2 ¯3 ↑ mat will give the first 2 rows (1st axis) and the last 3 columns (2nd axis) of mat.\n\n2 ¯3 ↑ mat\n\n┌→────┐\n↓2 3 4│\n│6 7 8│\n└~────┘\n\n\n\n\n\n\n↓ (Down arrow)\n\nmonadic ↓ (Split)\nSplit takes an array and reshapes it to be all 1 row. That row will contain nested arrays that each contain the values in 1 of the rows.\n\n⎕←mat←3 4⍴⍳12\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n↓mat\n\n┌→─────────────────────────────────┐\n│ ┌→──────┐ ┌→──────┐ ┌→─────────┐ │\n│ │1 2 3 4│ │5 6 7 8│ │9 10 11 12│ │\n│ └~──────┘ └~──────┘ └~─────────┘ │\n└∊─────────────────────────────────┘\n\n\n\n\n⎕ ← mat ← 3 1⍴'Hip' 'Hop' 'Dance'\n\n┌→────────┐\n↓ ┌→──┐   │\n│ │Hip│   │\n│ └───┘   │\n│ ┌→──┐   │\n│ │Hop│   │\n│ └───┘   │\n│ ┌→────┐ │\n│ │Dance│ │\n│ └─────┘ │\n└∊────────┘\n\n\n\n\n↓mat\n\n┌→────────────────────────────────┐\n│ ┌→──────┐ ┌→──────┐ ┌→────────┐ │\n│ │ ┌→──┐ │ │ ┌→──┐ │ │ ┌→────┐ │ │\n│ │ │Hip│ │ │ │Hop│ │ │ │Dance│ │ │\n│ │ └───┘ │ │ └───┘ │ │ └─────┘ │ │\n│ └∊──────┘ └∊──────┘ └∊────────┘ │\n└∊────────────────────────────────┘\n\n\n\n\n\ndyadic ↓ (Drop)\nIf ⍵ (right argument) is positive, removes the first ⍵ (right argument) elements of ⍺ (left argument).\n\n4 ↓ 'Pineapple'\n\n┌→────┐\n│apple│\n└─────┘\n\n\n\n\n12 ↓ 'Pineapple'\n\n┌⊖┐\n│ │\n└─┘\n\n\n\nIf ⍵ is negative, it removes the last elements rather than the first elements.\n\n¯5 ↓ 'Pineapple'\n\n┌→───┐\n│Pine│\n└────┘\n\n\n\nWhen ⍺ (left argument) is a scalar ⍵ (right argument) indexes on the first axis. The same rules apply to padding and negative numbers with higher dimension arrays.\n\n⎕←mat←3 4⍴⍳12\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n2 ↓ mat\n\n┌→─────────┐\n↓9 10 11 12│\n└~─────────┘\n\n\n\nWhen an array is passed to ⍺ (left argument) you can slice on more than just the first axis. For example, 2 ¯3 ↑ mat will remove the first 2 rows (1st axis) and the last 3 columns (2nd axis) of mat.\n\n2 ¯3 ↓ mat\n\n┌→┐\n↓9│\n└~┘\n\n\n\n\n\n\n⌸ (Quad equal)\n\nmonadic ⌸ (Key operator)\nThe key operator gives the index locations of each unique element in a vector. For example ,⌸ 'banana' has a b as the 1st element. a is the 2nd, 4th, and 6th elements. n is the 3rd and 5th elements.\n\na ← 'banana'\n\n\n,⌸ a\n\n┌→──────┐\n↓b 1    │\n│a 2 4 6│\n│n 3 5  │\n└+──────┘\n\n\n\nYou can also combine this with other functions to do operations such as sum those index locations together.\n\na {⍺,+/⍵}⌸ ⍳6\n\n┌→───┐\n↓b  1│\n│a 12│\n│n  8│\n└+───┘\n\n\n\n\na ,⌸ ⍳6\n\n┌→──────┐\n↓b 1    │\n│a 2 4 6│\n│n 3 5  │\n└+──────┘\n\n\n\n\n\n\n⊂ (Left shoe)\n\nmonadic ⊂ (Enclose)\nEnclose is used to turn an array into a nested array with just one element. For example 1 2 3 is an array of shape 3.\n\n1 2 3\n\n┌→────┐\n│1 2 3│\n└~────┘\n\n\n\n\n⍴1 2 3\n\n┌→┐\n│3│\n└~┘\n\n\n\nWhen we enclose 1 2 3 it becomes a scalar, meaning the shape is the empty list.\n\n⊂1 2 3\n\n┌─────────┐\n│ ┌→────┐ │\n│ │1 2 3│ │\n│ └~────┘ │\n└∊────────┘\n\n\n\n\n⍴⊂1 2 3\n\n┌⊖┐\n│0│\n└~┘\n\n\n\nThis can be used in conjunction with , in order to created arrays with nested elements.\n\n1(2 3)\n\n┌→────────┐\n│   ┌→──┐ │\n│ 1 │2 3│ │\n│   └~──┘ │\n└∊────────┘\n\n\n\n\n⍴ 1(2 3)\n\n┌→┐\n│2│\n└~┘\n\n\n\n\n1,⊂2 3\n\n┌→────────┐\n│   ┌→──┐ │\n│ 1 │2 3│ │\n│   └~──┘ │\n└∊────────┘\n\n\n\n\n⊂ 1(2 3)\n\n┌─────────────┐\n│ ┌→────────┐ │\n│ │   ┌→──┐ │ │\n│ │ 1 │2 3│ │ │\n│ │   └~──┘ │ │\n│ └∊────────┘ │\n└∊────────────┘\n\n\n\n\n⍴⊂ 1(2 3)\n\n┌⊖┐\n│0│\n└~┘\n\n\n\nA good way to see what enclose does is to do multiple of them, which continues to nest your original array deeper the more you add.\n\n⊂⊂ 1(2 3)\n\n┌─────────────────┐\n│ ┌─────────────┐ │\n│ │ ┌→────────┐ │ │\n│ │ │   ┌→──┐ │ │ │\n│ │ │ 1 │2 3│ │ │ │\n│ │ │   └~──┘ │ │ │\n│ │ └∊────────┘ │ │\n│ └∊────────────┘ │\n└∊────────────────┘\n\n\n\nAn enclosed simple scalar is still the original simple scalar.\n\n⊂1\n\n \n1\n \n\n\n\nThis adds 4 5 6 to each element of the LHS (1, 2, and 3):\n\n1 2 3+⊂4 5 6\n\n┌→────────────────────────┐\n│ ┌→────┐ ┌→────┐ ┌→────┐ │\n│ │5 6 7│ │6 7 8│ │7 8 9│ │\n│ └~────┘ └~────┘ └~────┘ │\n└∊────────────────────────┘\n\n\n\nIt’s basically the same idea as this, since (⊂ 4 5 6) and 1 are both scalars:\n\n1 2 3+1\n\n┌→────┐\n│2 3 4│\n└~────┘\n\n\n\n\n\ndyadic ⊂ (Partitioned enclose)\npartitioned enclose is used to split an array into separate enclosures (created nested arrays).\n⍺ (left argument) dictates where to split the array up. For example, 1 0 1 0 0 0 0 has a positive integer in the 1st and 3rd position and so we will split at the 1st and 3rd element\n\n1 0 1 0 0 0 0⊂ 1 2 3 4 5 6 7\n\n┌→──────────────────┐\n│ ┌→──┐ ┌→────────┐ │\n│ │1 2│ │3 4 5 6 7│ │\n│ └~──┘ └~────────┘ │\n└∊──────────────────┘\n\n\n\nThis can also be done with textual arrays\n\n1 0 1 0 0 0 0⊂'HiEarth'\n\n┌→─────────────┐\n│ ┌→─┐ ┌→────┐ │\n│ │Hi│ │Earth│ │\n│ └──┘ └─────┘ │\n└∊─────────────┘\n\n\n\nThe left argument of partitioned enclose controls the positioning of the newly created enclosures.\n\n2 0 1 0 3 0 ⊂ 1 2 3 4 5 6\n\n┌→──────────────────────────────┐\n│ ┌⊖┐ ┌→──┐ ┌→──┐ ┌⊖┐ ┌⊖┐ ┌→──┐ │\n│ │0│ │1 2│ │3 4│ │0│ │0│ │5 6│ │\n│ └~┘ └~──┘ └~──┘ └~┘ └~┘ └~──┘ │\n└∊──────────────────────────────┘\n\n\n\n\n1 0 2 0 0 0 0⊂'HiEarth'\n\n┌→─────────────────┐\n│ ┌→─┐ ┌⊖┐ ┌→────┐ │\n│ │Hi│ │ │ │Earth│ │\n│ └──┘ └─┘ └─────┘ │\n└∊─────────────────┘\n\n\n\n\n\n\n⊆ (Left shoe underbar)\n\nmonadic ⊆ (Nest)\n\n(⊆1) ≡ ⊂1\n\n \n1\n \n\n\n\n\n(⊆1 2 3) ≡ ⊂1 2 3\n\n \n1\n \n\n\n\n\n(⊆ 1 (1 2 3)) ≡ 1 (1 2 3)\n\n \n1\n \n\n\n\n\n⊆ 1 (1 2 3)\n\n1 (1 2 3)\n\n┌→──────────┐\n│   ┌→────┐ │\n│ 1 │1 2 3│ │\n│   └~────┘ │\n└∊──────────┘\n\n\n\n┌→──────────┐\n│   ┌→────┐ │\n│ 1 │1 2 3│ │\n│   └~────┘ │\n└∊──────────┘\n\n\n\n\n⊂ 1 (1 2 3)\n\n┌───────────────┐\n│ ┌→──────────┐ │\n│ │   ┌→────┐ │ │\n│ │ 1 │1 2 3│ │ │\n│ │   └~────┘ │ │\n│ └∊──────────┘ │\n└∊──────────────┘\n\n\n\n\n\ndyadic ⊆ (Partition)\nPartition breaks an array (⍵) up based on the numbers provided in the left argument (⍺).\nA new partition is created anytime the integer in the left argument changes. 0 means that element is not included in the output. For example:\n1 1 1 0 1 1 1 0 1 1 1 1⊆'How are you?': + The first 3 elements are in the first partition because there are 3 of the same integers 1 1 1.\n+ The first space is excluded because it is the fourth element in the right argument and the fourth element in the left argument is 0. + The second partition starts on the 5th element because it’s a non-zero integer that is not the same as the previous number.\n\n1 1 1 0 1 1 1 0 1 1 1 1⊆'How are you?'\n\n┌→───────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→───┐ │\n│ │How│ │are│ │you?│ │\n│ └───┘ └───┘ └────┘ │\n└∊───────────────────┘\n\n\n\n\n1 1 2 2 2 2 2⊆'HiEarth'\n\n┌→─────────────┐\n│ ┌→─┐ ┌→────┐ │\n│ │Hi│ │Earth│ │\n│ └──┘ └─────┘ │\n└∊─────────────┘\n\n\n\n\n1 1 2 2 2 0 0⊆'HiEarth'\n\n┌→───────────┐\n│ ┌→─┐ ┌→──┐ │\n│ │Hi│ │Ear│ │\n│ └──┘ └───┘ │\n└∊───────────┘\n\n\n\n\n\n\n⊃ (Right shoe)\n\nmonadic ⊃ (Disclose;First)\nDisclose removes the nesting around arrays. For example, in simple arrays disclose with reverse and enclose. This is because it is getting the first element in a list, and when an array is enclosed the first element is the whole original array.\n\na←1 2\n\n\n⊂a\n\n┌───────┐\n│ ┌→──┐ │\n│ │1 2│ │\n│ └~──┘ │\n└∊──────┘\n\n\n\n\na ≡ ⎕ ← ⊃⊂1 2\n\n┌→──┐\n│1 2│\n└~──┘\n \n1\n \n\n\n\nWhat disclose/first is doing is getting the first element in the array, regardless of whether it is nested or not.\n\n⊃ 'Word'\n\n \nW\n-\n\n\n\n\n⊃ (1 (1 2) 3) 4\n\n┌→──────────┐\n│   ┌→──┐   │\n│ 1 │1 2│ 3 │\n│   └~──┘   │\n└∊──────────┘\n\n\n\n\n⊃ (1 2)(3 4 5)\n\n┌→──┐\n│1 2│\n└~──┘\n\n\n\n\n\ndyadic ⊃ (Pick)\nPick is a way of indexing into an array to get particular elements. For example 3 ⊃ 'Word' will give the 3rd element in Word.\n\n3 ⊃ 'Word'\n\n \nr\n-\n\n\n\nIf the element you are selecting is an array, that array will be returned\n\n2 ⊃ (1 2)(3 4 5)\n\n┌→────┐\n│3 4 5│\n└~────┘\n\n\n\nIf you pass an array to the left argument it will index further. For example, 2 1 ⊃ (1 2)(3 4 5) will first go to the 2nd element (3 4 5) and then output the first element inside of that (3).\n\n2 1 ⊃ (1 2)(3 4 5)\n\n \n3\n \n\n\n\nIn order to index into a multi-dimensional array you need to specify the different dimensions as a scalar. For example if you are looking at a matrix (2d array), (⊂2 1) as the left argument will output the value in the 2nd row, 1st column.\n\n⎕←mat ← 2 3⍴⍳6\n\n┌→────┐\n↓1 2 3│\n│4 5 6│\n└~────┘\n\n\n\n\n(⊂2 1) ⊃ 2 3⍴⍳6\n\n \n4\n \n\n\n\nThese above concepts of indexing into subarrays and indexing into multi-dimensional arrays can be combined in one function call.\n\nG←2 3⍴('ABC' 1)('DEF' 2)('GHI' 3)('JKL' 4),('MNO' 5)('PQR' 6)\nG\n\n┌→────────────────────────────────────┐\n↓ ┌→────────┐ ┌→────────┐ ┌→────────┐ │\n│ │ ┌→──┐   │ │ ┌→──┐   │ │ ┌→──┐   │ │\n│ │ │ABC│ 1 │ │ │DEF│ 2 │ │ │GHI│ 3 │ │\n│ │ └───┘   │ │ └───┘   │ │ └───┘   │ │\n│ └∊────────┘ └∊────────┘ └∊────────┘ │\n│ ┌→────────┐ ┌→────────┐ ┌→────────┐ │\n│ │ ┌→──┐   │ │ ┌→──┐   │ │ ┌→──┐   │ │\n│ │ │JKL│ 4 │ │ │MNO│ 5 │ │ │PQR│ 6 │ │\n│ │ └───┘   │ │ └───┘   │ │ └───┘   │ │\n│ └∊────────┘ └∊────────┘ └∊────────┘ │\n└∊────────────────────────────────────┘\n\n\n\n\n((⊂2 1),1) ⊃ G\n\n┌→──┐\n│JKL│\n└───┘\n\n\n\n\n\n\n⊢ (Right tack)\n\nmonadic ⊢ (Same)\nReturn the argument back unchanged\n\n⊢1\n\n \n1\n \n\n\n\n\n⊢'abc'\n\n┌→──┐\n│abc│\n└───┘\n\n\n\n\n\ndyadic ⊢ (Right)\nReturns the right argument back unchanged\n\n'abc'⊢1\n\n \n1\n \n\n\n\n\n1⊢'abc'\n\n┌→──┐\n│abc│\n└───┘\n\n\n\n\n\n\n⊣ (Left tack)\n\nmonadic ⊣ (Same)\nReturns the argument back unchanged\n\n⊣'abc'\n\n┌→──┐\n│abc│\n└───┘\n\n\n\n\n\ndyadic ⊣ (Left)\nReturns the left argument back unchanged\n\n'abc'⊣1\n\n┌→──┐\n│abc│\n└───┘\n\n\n\n\n1⊣'abc'\n\n \n1\n \n\n\n\n\n\n\n⊥ (Up tack)\n\ndyadic ⊥ (Decode)\nDecode decodes the right argument using the encode definition on the left.\nIn the example of 2 ⊥ 1 1 0 1:\n\n2 on the left means that all values are encoded with 2 values, in other words binary\n1 1 0 1 in binary is equal to 13, so decode will return 13.\n\n\n2 ⊥ 1 1 0 1   ⍝ binary decode\n\n  \n13\n  \n\n\n\nAn array can also be decoded if each element is encoded differently. For example, if you have an array of 3 elements representing hours, minutes, and seconds you can use decode to convert it into seconds.\nHours would be decoded with 24, because there’s 24 hours in a day. Minutes would be decoded with 60, because there’s 60 minutes in an hour. Seconds would be decoded with 60 because there are 60 seconds in a minute.\n\n⍝ mixed radix: conversion of hours,\n⍝ minutes and seconds to seconds:\n24 60 60 ⊥ 2 46 40\n\n     \n10000\n     \n\n\n\n\n(2×60×60) + (46×60) + 40\n\n     \n10000\n     \n\n\n\nBelow are a few examples of a few other examples of ways decode can be used.\nA decimal decode:\n\n10 ⊥ 1 1 0 1   ⍝ decimal decode\n\n    \n1101\n    \n\n\n\n\n10 ⊥ 3 4 1 6   ⍝ decimal decode\n\n    \n3416\n    \n\n\n\n\n1j1⊥1 2 3 4\n\n   \n5J9\n   \n\n\n\n1⊥is sum over the first axis (+⌿)\n\n1⊥3 1 4 1 5 9\n\n  \n23\n  \n\n\n\n\n⎕←M←3 4⍴⍳12\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n\n1⊥M\n\n┌→──────────┐\n│15 18 21 24│\n└~──────────┘\n\n\n\n\n\n\n⊤ (Down tack)\n\ndyadic ⊤ (Encode)\n\n10 10 10 10 10 ⊤ 3658   ⍝ decimal encode\n\n┌→────────┐\n│0 3 6 5 8│\n└~────────┘\n\n\n\n\n10 10 10 ⊤ 3658   ⍝ truncated decimal encode\n\n┌→────┐\n│6 5 8│\n└~────┘\n\n\n\n\n0 10 10 ⊤ 3658\n\n┌→─────┐\n│36 5 8│\n└~─────┘\n\n\n\n\n2 2 2 2 ⊤ 7   ⍝ binary encode\n\n┌→──────┐\n│0 1 1 1│\n└~──────┘\n\n\n\n\n2 2 ⊤ 7   ⍝ truncated binary encode\n\n┌→──┐\n│1 1│\n└~──┘\n\n\n\n\n2 2 2 2 ⊤ 5 7 12   ⍝ binary encode\n\n┌→────┐\n↓0 0 1│\n│1 1 1│\n│0 1 0│\n│1 1 0│\n└~────┘\n\n\n\n\n⍝ mixed radix: encode of 10000 seconds\n⍝ to hours, minutes and seconds:\n24 60 60 ⊤ 10000\n\n┌→──────┐\n│2 46 40│\n└~──────┘"
  },
  {
    "objectID": "competition.html#forks",
    "href": "competition.html#forks",
    "title": "APL Competition 2022",
    "section": "Forks",
    "text": "Forks\nIn traditional mathematical notation (TMN): (f+g)(x)=f(x)+g(x). Forks (3-trains) are just a generalisation of this pattern to all functions (though the middle one has to be dyadic).\n\n(÷3)+(*3)\n\n           \n20.41887026\n           \n\n\n\n\n(÷+*)3\n\n           \n20.41887026\n           \n\n\n\n\n(+/÷≢) 2 5 8 9\n\n \n6\n \n\n\n\n\nmean ← +/÷≢\n\n\nmean 2 5 8 9\n\n \n6\n \n\n\n\nFor a dyadic fork, each of f and g are passed the LHS and the RHS:\n\n' '≠'How are you?'\n\n┌→──────────────────────┐\n│1 1 1 0 1 1 1 0 1 1 1 1│\n└~──────────────────────┘\n\n\n\n\n' '⊢'How are you?'\n\n┌→───────────┐\n│How are you?│\n└────────────┘\n\n\n\n\n(' '≠'How are you?') ⊆ (' '⊢'How are you?')\n\n┌→───────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→───┐ │\n│ │How│ │are│ │you?│ │\n│ └───┘ └───┘ └────┘ │\n└∊───────────────────┘\n\n\n\n\n' '(≠⊆⊢)'How are you?'\n\n┌→───────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→───┐ │\n│ │How│ │are│ │you?│ │\n│ └───┘ └───┘ └────┘ │\n└∊───────────────────┘\n\n\n\n\nsplit ← {(⍺≠⍵) ⊆ (⍺⊢⍵)}\n\n\n' ' split 'How are you?'\n\n┌→───────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→───┐ │\n│ │How│ │are│ │you?│ │\n│ └───┘ └───┘ └────┘ │\n└∊───────────────────┘"
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "First functions",
    "section": "",
    "text": "]box on -style=max -trains=tree -fns=on\n\n┌→─────────────────────────────────────┐\n│Was ON -style=max -trains=tree -fns=on│\n└──────────────────────────────────────┘"
  },
  {
    "objectID": "functions.html#boolean",
    "href": "functions.html#boolean",
    "title": "First functions",
    "section": "Boolean",
    "text": "Boolean\n\n= (Equal sign)\n\ndyadic = (Equal to)\n= is equal and returns a boolean (true/false). 1 means true, 0 means false.\n\n1 = 1\n\n \n1\n \n\n\n\n= works elementwise and will broadcast as needed.\n\n1 = 1 2\n\n┌→──┐\n│1 0│\n└~──┘\n\n\n\n\n1 = 1 1\n\n┌→──┐\n│1 1│\n└~──┘\n\n\n\nWe can also compare characters\n\n'Banana' = 'aaaaaa'\n\n┌→──────────┐\n│0 1 0 1 0 1│\n└~──────────┘\n\n\n\n\n'Banana' = 'a'\n\n┌→──────────┐\n│0 1 0 1 0 1│\n└~──────────┘\n\n\n\n\n'Banana' 'Apple' 'Candy' = 'a'\n\n┌→──────────────────────────────────────┐\n│ ┌→──────────┐ ┌→────────┐ ┌→────────┐ │\n│ │0 1 0 1 0 1│ │0 0 0 0 0│ │0 1 0 0 0│ │\n│ └~──────────┘ └~────────┘ └~────────┘ │\n└∊──────────────────────────────────────┘\n\n\n\n\n\n\n≠ (Not equal)\n\nmonadic ≠ (Unique Mask)\nMonadic ≠ returns 1 on the first occurrence of an item in an array.\n\n≠22 10 22 22 21 10 5 10\n\n┌→──────────────┐\n│1 1 0 0 1 0 1 0│\n└~──────────────┘\n\n\n\n\n≠ 'Banana'\n\n┌→──────────┐\n│1 1 1 0 0 0│\n└~──────────┘\n\n\n\n\n≠ 'Mississippi'\n\n┌→────────────────────┐\n│1 1 1 0 0 0 0 0 1 0 0│\n└~────────────────────┘\n\n\n\n\n\ndyadic ≠ (Not Equal To)\nDyadic ≠ returns true (1) if elements are not equal, and false (0) if elements are equal.\n\n1 2 3 ≠ 4 2 ¯1\n\n┌→────┐\n│1 0 1│\n└~────┘\n\n\n\nThe number 7 and the character 7 are not equal.\n\n7 ≠ '7'\n\n \n1\n \n\n\n\n\n\n\n< (Less than sign)\n\ndyadic < (Less than)\n\n1 2 3 < 4 2 ¯1\n\n┌→────┐\n│1 0 0│\n└~────┘\n\n\n\n\n1 2 3 < 2\n\n┌→────┐\n│1 0 0│\n└~────┘\n\n\n\n\n\n\n> (Greater than sign)\n\ndyadic > (Greater than)\n\n1 2 3 > 4 2 ¯1\n\n┌→────┐\n│0 0 1│\n└~────┘\n\n\n\n\n1 2 3 > 2\n\n┌→────┐\n│0 0 1│\n└~────┘\n\n\n\n\n\n\n≤ (Less than or equal to sign)\n\ndyadic ≤ (Less than or equal to)\n\n1 2 3 ≤ 4 2 ¯1\n\n┌→────┐\n│1 1 0│\n└~────┘\n\n\n\n\n1 2 3 ≤ 2\n\n┌→────┐\n│1 1 0│\n└~────┘\n\n\n\n\n\n\n≥ (Greater than or equal to sign)\n\ndyadic ≥ (Greater than or equal to)\n\n1 2 3 ≥ 4 2 ¯1\n\n┌→────┐\n│0 1 1│\n└~────┘\n\n\n\n\n1 2 3 ≥ 2\n\n┌→────┐\n│0 1 1│\n└~────┘\n\n\n\n\n\n\n≡ (Equal underbar)\n\nmonadic ≡ (Depth)\nDepth shows how nested an array is. A simple scalar is an array with no nesting.\n\n≡ 7\n\n \n0\n \n\n\n\nAn array of simple scalars has depth 1.\n\n≡ 'abc'\n\n \n1\n \n\n\n\nAn array that is an array of simple arrays has depth 2.\n\n(1 2)(3 4)\n\n┌→────────────┐\n│ ┌→──┐ ┌→──┐ │\n│ │1 2│ │3 4│ │\n│ └~──┘ └~──┘ │\n└∊────────────┘\n\n\n\n\n≡ (1 2)(3 4)\n\n \n2\n \n\n\n\nIf the depth is not consistent, then it returns the max depth as a negative number.\n\n(1 2)(3 4) (5 (6 7))\n\n┌→────────────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→────────┐ │\n│ │1 2│ │3 4│ │   ┌→──┐ │ │\n│ └~──┘ └~──┘ │ 5 │6 7│ │ │\n│             │   └~──┘ │ │\n│             └∊────────┘ │\n└∊────────────────────────┘\n\n\n\n\n≡ (1 2)(3 4) (5 (6 7))\n\n  \n¯3\n  \n\n\n\n\n\ndyadic ≡ (Match)\nMatch does a comparison to see if 2 objects are equal. It is similar to =, but it works on entire objects rather than elementwise. In other words it is equal with a wider scope.\n\n1 ≡ 1\n\n \n1\n \n\n\n\n\n1 ≡ 0\n\n \n0\n \n\n\n\n≡ works on whole objects and not elementwise with broadcasting.\n\n1 ≡ 1 1\n\n \n0\n \n\n\n\n\n\n\n≢ (Equal Underbar Slash)\n\nmonadic ≢ (Tally)\nTally counts the major cells in an array. This means it gives the length of the leading axis. For a vector, or rank 1 array, this is the same as it’s shape but as a scalar.\n\n≢ 1 2 3\n\n \n3\n \n\n\n\n\n⍴ 1 2 3\n\n┌→┐\n│3│\n└~┘\n\n\n\nIf there are multiple dimensions, Tally returns the number of major cells, which is the size of the first dimension\n\n≢ 2 3 ⍴ ⍳6\n\n \n2\n \n\n\n\n\n≢ 3 2 ⍴ ⍳6\n\n \n3\n \n\n\n\n\n\ndyadic ≢ (Not match)\nNot match does a comparison to see if 2 objects are not equal. It is similar to ≠, but it works on entire objects rather than elementwise. In other words, it is equal with a wider scope.\n\n1 ≢ 1\n\n \n0\n \n\n\n\n\n1 ≢ 0\n\n \n1\n \n\n\n\n≢ works on whole objects and not elementwise with broadcasting.\n\n1 ≢ 1 1\n\n \n1\n \n\n\n\n\n\n\n∨ (Logical or)\n\ndyadic ∨ (Greatest Common Divisor (Or))\nStandard or operator when applied to booleans.\n\n0 1 0 1 ∨ 0 0 1 1  ⍝ Truth table for *or*\n\n┌→──────┐\n│0 1 1 1│\n└~──────┘\n\n\n\n5 is the largest number that divides 15 and 35 cleanly (meaning no remainder). Therefore, 5 is the greatest common divisor of 15 and 35.\n\n15 1 2 7 ∨ 35 1 4 0  ⍝ GCD\n\n┌→──────┐\n│5 1 2 7│\n└~──────┘\n\n\n\n\n\n\n⍱ (Logical NOR)\n\ndyadic ⍱ (Nor)\nFor more details on logical nor, see this page\n\n0 1 0 1 ⍱ 0 0 1 1  ⍝ Truth table for *nor*\n\n┌→──────┐\n│1 0 0 0│\n└~──────┘\n\n\n\n\n\n\n∧ (Logical AND)\n\ndyadic ∧ (Lowest Common Multiple (And))\nStandard and operator when applied to booleans.\n\n0 1 0 1 ∧ 0 0 1 1  ⍝ Truth table for *and*\n\n┌→──────┐\n│0 0 0 1│\n└~──────┘\n\n\n\n105 is the smallest multiple of both 15 and 35, therefore 105 is the lowest common multiple of 15 and 35.\n\n15 1 2 7 ∧ 35 1 4 0  ⍝ LCM\n\n┌→────────┐\n│105 1 4 0│\n└~────────┘\n\n\n\n\n\n\n~ (Logical NOT)\n\nmonadic ~ (Not)\n\n~ 0 1  ⍝ Truth table for *not*\n\n┌→──┐\n│1 0│\n└~──┘\n\n\n\n\n\ndyadic ~ (Without;Excluding)\nGives the elements from the left argument that are not in the right.\n\n3 1 4 1 5 ~ 5 1\n\n┌→──┐\n│3 4│\n└~──┘\n\n\n\nAlso works on the character vectors\n\n'aa' 'bb' 'cc' 'bb'  ~ 'bb' 'xx'\n\n┌→──────────┐\n│ ┌→─┐ ┌→─┐ │\n│ │aa│ │cc│ │\n│ └──┘ └──┘ │\n└∊──────────┘\n\n\n\nAlso works on nested arrays\n\n(1 2) 3 ~ ⊂1 2\n\n┌→┐\n│3│\n└~┘\n\n\n\n\n\n\n⍲ (Logical NAND)\n\ndyadic ⍲ (Nand)\nNand is “Not and”\n\n0 1 0 1 ⍲ 0 0 1 1  ⍝ Truth table for *nand*\n\n┌→──────┐\n│1 1 1 0│\n└~──────┘\n\n\n\nWe could use and (^) apply not (~) afterward to get the same result. As you can see it truly is “Not and”\n\n~ 0 1 0 1 ∧ 0 0 1 1  ⍝ Truth table for *nand*\n\n┌→──────┐\n│1 1 1 0│\n└~──────┘\n\n\n\n\n\n\n/ (Slash)\n\nmonadic / (Replicate)\n\nv←22 10 22 22 21 10 5 10\n≠v\n\n┌→──────────────┐\n│1 1 0 0 1 0 1 0│\n└~──────────────┘\n\n\n\n\n(≠v)/v\n\n┌→─────────┐\n│22 10 21 5│\n└~─────────┘\n\n\n\n\n3 1 3 1 3 1 / 'Banana'\n\n┌→───────────┐\n│BBBannnannna│\n└────────────┘"
  },
  {
    "objectID": "functions.html#min-max-index-concat",
    "href": "functions.html#min-max-index-concat",
    "title": "First functions",
    "section": "Min, max, index, concat",
    "text": "Min, max, index, concat\n\n⍳ (iota)\n\nmonadic ⍳ (index generator)\nCreates index locations for array with specified shape.\n\n⍳4\n\n┌→──────┐\n│1 2 3 4│\n└~──────┘\n\n\n\n\n⍳2 3\n\n┌→──────────────────┐\n↓ ┌→──┐ ┌→──┐ ┌→──┐ │\n│ │1 1│ │1 2│ │1 3│ │\n│ └~──┘ └~──┘ └~──┘ │\n│ ┌→──┐ ┌→──┐ ┌→──┐ │\n│ │2 1│ │2 2│ │2 3│ │\n│ └~──┘ └~──┘ └~──┘ │\n└∊──────────────────┘\n\n\n\n⍳ is often used with ⍴ to create arrays\n\n2 3 ⍴ ⍳6\n\n┌→────┐\n↓1 2 3│\n│4 5 6│\n└~────┘\n\n\n\nTo generate an array with various patterns you can combine with other functions.\n\n1+2×⍳6\n\n┌→────────────┐\n│3 5 7 9 11 13│\n└~────────────┘\n\n\n\nArray of shape 0 is nan empty vector and the index locations of a shape 0 array is and empty vector.\n\n⍳0\n\n┌⊖┐\n│0│\n└~┘\n\n\n\n\n\ndyadic ⍳ (index of)\nProvides the index locations for where ⍵ (right argument) is in ⍺ (left argument)\n\n1 3 6 5 4 ⍳ 3\n\n \n2\n \n\n\n\n\n'ABCDABCDEF' ⍳ 'ACFG'\n\n┌→────────┐\n│1 3 10 11│\n└~────────┘\n\n\n\n\n⎕←mat←3 2 ⍴ ⍳6\n\n┌→──┐\n↓1 2│\n│3 4│\n│5 6│\n└~──┘\n\n\n\n⍳ works on major cells, or along the first dimension. The third major cell of mat is 5 6.\n\nmat←3 2 ⍴ ⍳6\nmat ⍳ 5 6\n\n \n3\n \n\n\n\n\n\n\n⍸ (iota underbar)\n\nmonadic ⍸ (Where)\nWhen applied to a boolean/binary array, where gives index locations of the true values.\n\n⍸ 1 0 0 1 1\n\n┌→────┐\n│1 4 5│\n└~────┘\n\n\n\nWhen applied to a natural number, where repeats the index locations if the number is greater than 1. For example ⍸1 2 3 would give 1 2 2 3 3 3\n\n⍸1 2 3\n\n┌→──────────┐\n│1 2 2 3 3 3│\n└~──────────┘\n\n\n\n\n⍸ 2 0 0 2 1\n\n┌→────────┐\n│1 1 4 4 5│\n└~────────┘\n\n\n\nWhen applied to a higher rank array it still provides the index locations of the elements, but index locations have multiple values (in this case row and column).\n\n⎕←bmat ← 2 3 ⍴ 0 1 0 1 0 1\n⍸ bmat\n\n┌→────┐\n↓0 1 0│\n│1 0 1│\n└~────┘\n\n\n\n┌→──────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→──┐ │\n│ │1 2│ │2 1│ │2 3│ │\n│ └~──┘ └~──┘ └~──┘ │\n└∊──────────────────┘\n\n\n\n\n⎕←bmat ← 2 3 ⍴ 0 2 0 2 0 2\n⍸ bmat\n\n┌→────┐\n↓0 2 0│\n│2 0 2│\n└~────┘\n\n\n\n┌→────────────────────────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→──┐ ┌→──┐ ┌→──┐ ┌→──┐ │\n│ │1 2│ │1 2│ │2 1│ │2 1│ │2 3│ │2 3│ │\n│ └~──┘ └~──┘ └~──┘ └~──┘ └~──┘ └~──┘ │\n└∊────────────────────────────────────┘\n\n\n\n\n\ndyadic ⍸ (Interval Index)\nInterval index creates intervals and returns an array that tells you which interval a value falls in.\nIf the following example, ⍵ is 2 4 6. Therefore the following intervals (sometimes called bins) are created.\n\n0th interval: Less than 2\n1st interval: 2-4 (excluding 4)\n2nd interval: 4-6 (excluding 6)\n3rd interval: Greater than or equal to 6\n\n⍺ (right argument) is 1 2 3 4 5 6 7 so let’s put those into intervals, which the first interval starting at 0.\n\nThe first value of ⍺ is 1. 1 is Less than 2. Therefore it is in the 0th interval and interval index returns 0.\nThe second value of ⍺ is 2. 2 is in the 2-4 range. Therefore it is in the 1st interval and interval index returns 1.\nThe third value of ⍺ is 3. 3 is in the 2-4 range. Therefore it is in the 1st interval and interval index returns 1.\nThe fourth value of ⍺ is 4. 4 is in the 4-6 range. Therefore it is in the 2nd interval and interval index returns 2.\n\nAnd so on and so forth.\n\n2 4 6 ⍸ 1 2 3 4 5 6 7\n\n┌→────────────┐\n│0 1 1 2 2 3 3│\n└~────────────┘\n\n\n\nInterval index works the same way with character vectors.\n\nD is in the first interval because it is between A and E.\nY is in the last interval (fifth) because it is larger than all values\nA is in the first interval because it is between A and E.\nL is in the third interval because it is between I and O.\n\netc.\n\n'AEIOU' ⍸ 'DYALOG'\n\n┌→──────────┐\n│1 5 1 3 4 2│\n└~──────────┘\n\n\n\nInterval index works across major cells.\n\n⎕←mat←3 2⍴⍳6\n\n┌→──┐\n↓1 2│\n│3 4│\n│5 6│\n└~──┘\n\n\n\n\nmat ⍸ 3 3\n\n \n1\n \n\n\n\n\nmat ⍸ 3 5\n\n \n2\n \n\n\n\n\nmat ⍸ 2 2 ⍴ 3 3 3 5\n\n┌→──┐\n│1 2│\n└~──┘\n\n\n\n\n\n\n⌈ (Upstile)\n\nmonadic ⌈ (Ceiling)\nRounds up to nearest whole number.\n\n⌈ 3.4 ¯3.4 3 0\n\n┌→───────┐\n│4 ¯3 3 0│\n└~───────┘\n\n\n\n\n\ndyadic ⌈ (Maximum)\nTakes maximum of 2 values\n\n3⌈2\n\n \n3\n \n\n\n\n\n3 2⌈2 3\n\n┌→──┐\n│3 3│\n└~──┘\n\n\n\n\n4 ⌈ 6 ⌈ 2\n\n \n6\n \n\n\n\n\na ← ¯4 6 2\n0 ⌈ a\n\n┌→────┐\n│0 6 2│\n└~────┘\n\n\n\n\n\n\n⌊ (Downstile)\n\nmonadic ⌊ (Floor)\nRounds down to nearest whole number\n\n⌊ 3.4 ¯3.4 3 0\n\n┌→───────┐\n│3 ¯4 3 0│\n└~───────┘\n\n\n\n\n\ndyadic ⌊ (Minimum)\nTakes minimum of 2 values\n\n4 ⌊ 6 ⌊ 2.5\n\n   \n2.5"
  },
  {
    "objectID": "operators.html",
    "href": "operators.html",
    "title": "Operators and axis",
    "section": "",
    "text": "This post will explore some introductory operators (aka “higher order functions”) in APL."
  },
  {
    "objectID": "operators.html#axis",
    "href": "operators.html#axis",
    "title": "Operators and axis",
    "section": "Axis",
    "text": "Axis\n\n3 2⍴⍳6\n\n┌→──┐\n↓1 2│\n│3 4│\n│5 6│\n└~──┘\n\n\n\nAxis changes how the equal operator consumes the right argument. We specify a dimesion and we broadcast the operator across that dimension. In this case we are comparing the columns of the array to the left argument.\n\n1 4 5 =[1] 3 2⍴⍳6\n\n┌→──┐\n↓1 0│\n│0 1│\n│1 0│\n└~──┘\n\n\n\n\n⎕←mat ← 2 3 ⍴ 10 20 30 40 50 60\n\n┌→───────┐\n↓10 20 30│\n│40 50 60│\n└~───────┘\n\n\n\nSimilarly we can modify the plus operator to broadcast along the columns.\n\nmat+[1]1 2    ⍝ add along first axis\n\n┌→───────┐\n↓11 21 31│\n│42 52 62│\n└~───────┘"
  },
  {
    "objectID": "operators.html#comma-functions",
    "href": "operators.html#comma-functions",
    "title": "Operators and axis",
    "section": "Comma functions",
    "text": "Comma functions\n\n, (Comma)\n\nmonadic , (Ravel)\n\n⎕ ← cube ← 2 2 2 ⍴ ⍳8\n\n┌┌→──┐\n↓↓1 2│\n││3 4│\n││   │\n││5 6│\n││7 8│\n└└~──┘\n\n\n\nReturns the elemenst as a vector\n\n, cube\n\n┌→──────────────┐\n│1 2 3 4 5 6 7 8│\n└~──────────────┘\n\n\n\n\n, (1 2)(1 2)\n\n┌→────────────┐\n│ ┌→──┐ ┌→──┐ │\n│ │1 2│ │1 2│ │\n│ └~──┘ └~──┘ │\n└∊────────────┘\n\n\n\n\n\nmonadic , (Ravel) with axis\n\n'ABC'\n\n┌→──┐\n│ABC│\n└───┘\n\n\n\nWe can use the axis modify insert a new dimension with ravel. We started with a single dimension, and we inserted a new one after it\n\n,[0.5]'ABC'\n\n┌→──┐\n↓ABC│\n└───┘\n\n\n\n\n⍴'ABC'\n\n┌→┐\n│3│\n└~┘\n\n\n\nThe fraction indicates where the new dimension is inserted\n\n⍴,[0.5]'ABC'\n\n┌→──┐\n│1 3│\n└~──┘\n\n\n\nIf we specify a null dimension the dimension is added at the end\n\n⍴,[⍬]'ABC'\n\n┌→──┐\n│3 1│\n└~──┘\n\n\n\n\n2 2 2⍴⍳8\n\n┌┌→──┐\n↓↓1 2│\n││3 4│\n││   │\n││5 6│\n││7 8│\n└└~──┘\n\n\n\n\n⎕←M ← 2 3 4 ⍴ ⍳24\n\n┌┌→──────────┐\n↓↓ 1  2  3  4│\n││ 5  6  7  8│\n││ 9 10 11 12│\n││           │\n││13 14 15 16│\n││17 18 19 20│\n││21 22 23 24│\n└└~──────────┘\n\n\n\nSpecifying more than one dimension will merge the two given dimensions\n\n,[1 2]M\n\n┌→──────────┐\n↓ 1  2  3  4│\n│ 5  6  7  8│\n│ 9 10 11 12│\n│13 14 15 16│\n│17 18 19 20│\n│21 22 23 24│\n└~──────────┘\n\n\n\n\n⍴,[1 2]M\n\n┌→──┐\n│6 4│\n└~──┘\n\n\n\n\n,[2 3]M\n\n┌→──────────────────────────────────┐\n↓ 1  2  3  4  5  6  7  8  9 10 11 12│\n│13 14 15 16 17 18 19 20 21 22 23 24│\n└~──────────────────────────────────┘\n\n\n\n\n⍴,[2 3]M\n\n┌→───┐\n│2 12│\n└~───┘\n\n\n\n\n\ndyadic , (Catenate/Laminate (Join))\nJoins arrays together\n\n1 2 3 , 4 5 6\n\n┌→──────────┐\n│1 2 3 4 5 6│\n└~──────────┘\n\n\n\nWill be broadcast along the first dimension.\n\ncube ← 2 2 2 ⍴ ⍳8\ncube , 99\n\n┌┌→─────┐\n↓↓1 2 99│\n││3 4 99│\n││      │\n││5 6 99│\n││7 8 99│\n└└~─────┘\n\n\n\n\n\ndyadic , (Ravel) with axis\n\nrect←3 2⍴⍳6\nrect\n\n┌→──┐\n↓1 2│\n│3 4│\n│5 6│\n└~──┘\n\n\n\n\n⍴rect\n\n┌→──┐\n│3 2│\n└~──┘\n\n\n\nAdd the element 10 to the end of each row\n\nrect,10\n\n┌→─────┐\n↓1 2 10│\n│3 4 10│\n│5 6 10│\n└~─────┘\n\n\n\nWe can modify laminate to add the given element to the columns (axis 1) instead of the rows (axis 2)\n\nrect,[1]10\n\n┌→────┐\n↓ 1  2│\n│ 3  4│\n│ 5  6│\n│10 10│\n└~────┘\n\n\n\nA fractional axis creates a new axis and laminates that onto the existing rect\n\nrect,[0.5]10\n\n┌┌→────┐\n↓↓ 1  2│\n││ 3  4│\n││ 5  6│\n││     │\n││10 10│\n││10 10│\n││10 10│\n└└~────┘\n\n\n\n\n'HEADING',[0.5]'-'\n\n┌→──────┐\n↓HEADING│\n│-------│\n└───────┘\n\n\n\n\n\n\n⍪ (Comma bar)\n\nmonadic ⍪ (Table / Ravel items)\nVery similar to ravel. Operates on the first axis by default instead of the last axis.\n\n⍪1\n\n┌→┐\n↓1│\n└~┘\n\n\n\nThis can be used to create columns instead of rows\n\n⎕←,5⍴⎕A\n⎕←⍪5⍴⎕A\n\n┌→────┐\n│ABCDE│\n└─────┘\n\n\n\n┌→┐\n↓A│\n│B│\n│C│\n│D│\n│E│\n└─┘\n\n\n\n\n2 3 4⍴⎕A\n\n┌┌→───┐\n↓↓ABCD│\n││EFGH│\n││IJKL│\n││    │\n││MNOP│\n││QRST│\n││UVWX│\n└└────┘\n\n\n\nRavels the dimensions down to 2 leaving the size of the first dimension unchanged and merging the others.\n\n⍴⍪2 3 4⍴⎕A\n\n┌→───┐\n│2 12│\n└~───┘\n\n\n\n\n⍪2 3 4⍴⎕A\n\n┌→───────────┐\n↓ABCDEFGHIJKL│\n│MNOPQRSTUVWX│\n└────────────┘\n\n\n\n\n\ndyadic ⍪ (Catenate first)\nOperates by catenating the first dimensions\n\n1 2 3 ⍪ 4 5 6\n\n┌→──────────┐\n│1 2 3 4 5 6│\n└~──────────┘\n\n\n\n\ncube ← 2 2 2 ⍴ ⍳8\ncube ⍪ 99\n\n┌┌→────┐\n↓↓ 1  2│\n││ 3  4│\n││     │\n││ 5  6│\n││ 7  8│\n││     │\n││99 99│\n││99 99│\n└└~────┘"
  },
  {
    "objectID": "operators.html#operator-glyphs",
    "href": "operators.html#operator-glyphs",
    "title": "Operators and axis",
    "section": "Operator glyphs",
    "text": "Operator glyphs\n\n/ (Slash)\n\nmonadic / (Reduce / N-wise Reduce)\n\nmonadic function (Reduce)\ninserts the function on the right between the elements of the given array\n1 2 3 4 5 —> 1+2+3+4+5\n\n⎕ ← a ← ⍳5\n+/a\n\n┌→────────┐\n│1 2 3 4 5│\n└~────────┘\n\n\n\n  \n15\n  \n\n\n\nCan be used to multiply all elements together\n\na ← ⍳5\n×/a\n\n   \n120\n   \n\n\n\n\na ← ⍳3\n÷/a\n\n   \n1.5\n   \n\n\n\nFind the maximum element in an array\n\na ← 4 6 2\n⌈/ a\n\n \n6\n \n\n\n\nFind the minimum element in the array\n\na ← 4 6 2\n⌊/ a\n\n \n2\n \n\n\n\n\n×/⍳5\n\n   \n120\n   \n\n\n\n\n!5\n\n   \n120\n   \n\n\n\n\n\ndyadic function (N-wise Reduce)\nWindowed sum with window of 3:\n\n3+/⍳4  ⍝ (1+2+3) (2+3+4)\n\n┌→──┐\n│6 9│\n└~──┘\n\n\n\nWindowed sum with window of 2:\n\n2+/⍳4  ⍝ (1+2) (2+3) (3+4)\n\n┌→────┐\n│3 5 7│\n└~────┘\n\n\n\nMoving average\n\n3÷⍨3+/⍳4\n\n┌→──┐\n│2 3│\n└~──┘\n\n\n\n\n0+/⍳4  ⍝ Identity element for +\n\n┌→────────┐\n│0 0 0 0 0│\n└~────────┘\n\n\n\n\n0×/⍳4  ⍝ Identity element for ×\n\n┌→────────┐\n│1 1 1 1 1│\n└~────────┘\n\n\n\n\n¯2,/⍳4⍝ (2,1) (3,2) (4,3)\n\n┌→──────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→──┐ │\n│ │2 1│ │3 2│ │4 3│ │\n│ └~──┘ └~──┘ └~──┘ │\n└∊──────────────────┘\n\n\n\n\n\n\nAxis (with Monadic Operand)\nCombining reduce with axis allows us to specify the dimension to reduce.\nSum the columns\n\nmat←2 3⍴⍳6\n+/[1]mat\n\n┌→────┐\n│5 7 9│\n└~────┘\n\n\n\nSum the rows\n\nmat←2 3⍴⍳6\n+/[2]mat\n\n┌→───┐\n│6 15│\n└~───┘\n\n\n\n\nmat←2 3⍴⍳6\n+/mat\n\n┌→───┐\n│6 15│\n└~───┘\n\n\n\n\n\n\n\\ (Slope)\n\nmonadic \\ (Scan)\nShow all the intermediate steps of reduce\n1 (1+2) (1+2+3) (1+2+3+4) (1+2+3+4+5)\n\na ← ⍳5\n+\\a\n\n┌→──────────┐\n│1 3 6 10 15│\n└~──────────┘\n\n\n\n\na ← ⍳5\n×\\a\n\n┌→───────────┐\n│1 2 6 24 120│\n└~───────────┘\n\n\n\n\n⎕ ← a ← ⍳3\n÷\\a\n\n┌→────┐\n│1 2 3│\n└~────┘\n\n\n\n┌→────────┐\n│1 0.5 1.5│\n└~────────┘\n\n\n\n\n\n\n⌿ (Slash Bar)\n\nmonadic ⌿ (Reduce First)\nWorks similar to reduce. Operates on the first dimension rather than the last.\n\n⎕←mat ← 2 3 ⍴ ⍳6\n+/mat\n\n┌→────┐\n↓1 2 3│\n│4 5 6│\n└~────┘\n\n\n\n┌→───┐\n│6 15│\n└~───┘\n\n\n\n\n⎕←mat ← 2 3 ⍴ ⍳6\n+/[1]mat\n\n┌→────┐\n↓1 2 3│\n│4 5 6│\n└~────┘\n\n\n\n┌→────┐\n│5 7 9│\n└~────┘\n\n\n\n\n+⌿mat\n\n┌→────┐\n│5 7 9│\n└~────┘\n\n\n\n\n\n\n⍀ (Slope Bar)\n\nmonadic ⍀ (Scan first)\nSimilar to scan but operates on the first dimension rather than the last\n\n⎕ ← mat ← 2 3 ⍴ ⍳6\n+⍀mat\n\n┌→────┐\n↓1 2 3│\n│4 5 6│\n└~────┘\n\n\n\n┌→────┐\n↓1 2 3│\n│5 7 9│\n└~────┘\n\n\n\n\n\n\n⍤ (Jot Diaresis)\n\ndyadic ⍤ (Rank)\n\ntrace←{⍺←⊢⋄⎕←'⍺: '⍺ '⍵: '⍵⋄ ⍺ ⍺⍺ ⍵} ⍝ explainer function\n\n⍤ lets you specify the dimensions of the matrix to pass into the next function. In this case we only want plus reduce first to operate across rows.\n\n⎕←cube ← 2 3 4 ⍴ ⍳24\n(+⌿⍤1)cube\n\n┌┌→──────────┐\n↓↓ 1  2  3  4│\n││ 5  6  7  8│\n││ 9 10 11 12│\n││           │\n││13 14 15 16│\n││17 18 19 20│\n││21 22 23 24│\n└└~──────────┘\n\n\n\n┌→───────┐\n↓10 26 42│\n│58 74 90│\n└~───────┘\n\n\n\n\n(+⌿trace⍤1)cube ⍝ show the input to pluse reduce first\n\n┌→────────────────┐\n│ ┌→──┐ ┌→──────┐ │\n│ │⍵: │ │1 2 3 4│ │\n│ └───┘ └~──────┘ │\n└∊────────────────┘\n┌→────────────────┐\n│ ┌→──┐ ┌→──────┐ │\n│ │⍵: │ │5 6 7 8│ │\n│ └───┘ └~──────┘ │\n└∊────────────────┘\n┌→───────────────────┐\n│ ┌→──┐ ┌→─────────┐ │\n│ │⍵: │ │9 10 11 12│ │\n│ └───┘ └~─────────┘ │\n└∊───────────────────┘\n┌→────────────────────┐\n│ ┌→──┐ ┌→──────────┐ │\n│ │⍵: │ │13 14 15 16│ │\n│ └───┘ └~──────────┘ │\n└∊────────────────────┘\n┌→────────────────────┐\n│ ┌→──┐ ┌→──────────┐ │\n│ │⍵: │ │17 18 19 20│ │\n│ └───┘ └~──────────┘ │\n└∊────────────────────┘\n┌→────────────────────┐\n│ ┌→──┐ ┌→──────────┐ │\n│ │⍵: │ │21 22 23 24│ │\n│ └───┘ └~──────────┘ │\n└∊────────────────────┘\n┌→───────┐\n↓10 26 42│\n│58 74 90│\n└~───────┘\n\n\n\nSum the columns\n\n⎕←mat ← 3 4 ⍴ ⍳12\n+⌿mat\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n┌→──────────┐\n│15 18 21 24│\n└~──────────┘\n\n\n\nFor each of the 3 4 (the first 2 dimensions) matrices in the larger cube apply plus reduce first\n\n⎕←cube\n(+⌿⍤2)cube\n\n┌┌→──────────┐\n↓↓ 1  2  3  4│\n││ 5  6  7  8│\n││ 9 10 11 12│\n││           │\n││13 14 15 16│\n││17 18 19 20│\n││21 22 23 24│\n└└~──────────┘\n\n\n\n┌→──────────┐\n↓15 18 21 24│\n│51 54 57 60│\n└~──────────┘\n\n\n\nGiven ⍺ and ⍵ arguments we can specify dimensions for each. In the following we take the ⍺ argument by element and the ⍵ argument by row\n\n⎕←mat\n1 2 3 (+trace⍤0 1) mat\n\n┌→─────────┐\n↓1  2  3  4│\n│5  6  7  8│\n│9 10 11 12│\n└~─────────┘\n\n\n\n┌→────────────────────────┐\n│ ┌→──┐   ┌→──┐ ┌→──────┐ │\n│ │⍺: │ 1 │⍵: │ │1 2 3 4│ │\n│ └───┘   └───┘ └~──────┘ │\n└∊────────────────────────┘\n┌→────────────────────────┐\n│ ┌→──┐   ┌→──┐ ┌→──────┐ │\n│ │⍺: │ 2 │⍵: │ │5 6 7 8│ │\n│ └───┘   └───┘ └~──────┘ │\n└∊────────────────────────┘\n┌→───────────────────────────┐\n│ ┌→──┐   ┌→──┐ ┌→─────────┐ │\n│ │⍺: │ 3 │⍵: │ │9 10 11 12│ │\n│ └───┘   └───┘ └~─────────┘ │\n└∊───────────────────────────┘\n┌→──────────┐\n↓ 2  3  4  5│\n│ 7  8  9 10│\n│12 13 14 15│\n└~──────────┘\n\n\n\n\n\ndyadic ⍤ (Atop)\n⍤ used dyadically is a function application rule\nf⍤g X → f(gX) → fgX X f⍤g Y → f X g Y\n\nf ← *⍤÷\n\n\n⎕←*(÷3)\n⎕←f 3\n\n           \n1.395612425\n           \n\n\n\n           \n1.395612425\n           \n\n\n\n\n⎕←*2÷3\n⎕←2 f 3\n\n           \n1.947734041\n           \n\n\n\n           \n1.947734041\n           \n\n\n\n\n\n\n∘ (Jot)\n\ndyadic ∘ (Bind)\nCan be used for partial function application. Binds the right argument 2 to the power function returning a new function that takes only a single argument\n\nsqr ← *∘2\n\n\nsqr 3\n\n \n9\n \n\n\n\nCan bind the left argument as well\n\npow2 ← 2∘*\n\n\npow2 3\n\n \n8\n \n\n\n\n\n\ndyadic ∘ (Beside)\nAnother function composition rule\nf∘g X → f(gX) → fgX X f∘g Y → X f g Y\n\nf ← *∘÷\n\n\n*(÷3)\n\n           \n1.395612425\n           \n\n\n\n\nf 3\n\n           \n1.395612425\n           \n\n\n\n\n2 f 3\n\n          \n1.25992105\n          \n\n\n\n\n2 * (÷3)\n\n          \n1.25992105\n          \n\n\n\n\n2*÷3\n\n          \n1.25992105\n          \n\n\n\n\n\n\n⍥ (Circle diaresis)\n\ndyadic ⍥ (Over)\nAnother function composition rule.\nf⍥g Y → f(gX) → fgX X f⍥g Y → (g X)f(g Y)\n\nf ← *⍥÷\n\n\n*(÷3)\n\n           \n1.395612425\n           \n\n\n\n\nf 3\n\n           \n1.395612425\n           \n\n\n\n\n2 f 3\n\n           \n0.793700526\n           \n\n\n\n\n(÷2)*÷3\n\n           \n0.793700526\n           \n\n\n\n\n10 (÷⍥!) 6   ⍝ P(10,4)\n\n    \n5040\n    \n\n\n\n\n(!10)÷!(10-4)  ⍝ P(10,4)\n\n    \n5040\n    \n\n\n\n\n\n\n⍣ (Star Diaeresis)\n\ndyadic ⍣ (Power operator)\n\nS ← +∘1\n\n\nS 0\n\n \n1\n \n\n\n\n⍣ Calls a function the given number of times.\nS(S(S 0))\n\n(S⍣3) 0\n\n \n3\n \n\n\n\n\nadd ← {(S⍣⍺) ⍵}\n\n\n2 add 3\n\n \n5\n \n\n\n\n\nmult ← {⍺ (add⍣⍵) 0}\n\n\n3 mult 4\n\n  \n12\n  \n\n\n\n\nP ← S⍣¯1\n\n\nP 3\n\n \n2\n \n\n\n\n\n(S⍣¯3) 5\n\n \n2\n \n\n\n\n\nsqr ← *∘2\n\n\n(sqr⍣¯1)9\n\n \n3\n \n\n\n\n\npow ← {⍺ (mult⍣⍵) 1}\n\n\n2 pow 3\n\n \n8\n \n\n\n\n\n1 +∘÷⍣= 1\n\n           \n1.618033989\n           \n\n\n\n\nf ← +∘÷\n\n\n1 f 1\n\n \n2\n \n\n\n\n\n1 f 2\n\n   \n1.5\n   \n\n\n\n\n1 f 1.5\n\n           \n1.666666667\n           \n\n\n\n\n1 (f⍣15) 1\n\n           \n1.618034448\n           \n\n\n\n\n1 (f⍣=) 1\n\n           \n1.618033989"
  },
  {
    "objectID": "operators.html#linear-algebra",
    "href": "operators.html#linear-algebra",
    "title": "Operators and axis",
    "section": "Linear Algebra",
    "text": "Linear Algebra\n\n. (Dot)\n\nDyadic . (Inner Product)\nThe ⍵⍵ operator specifies how elements are combined. The ⍺⍺ argument specifies how the results of the ⍵⍵ operation are combined.\n(1×4) + (2×5) + (3×6)\n\n1 2 3 +.× 4 5 6  ⍝ Dot product\n\n  \n32\n  \n\n\n\n(3=3)∧(3=3)∧(3=3)∧(3=3)\n\n3 ∧.= 3 3 3 3  ⍝ All-equal\n\n \n1\n \n\n\n\n(1×1)+(2×3)    (1×2)+(2×4)\n(3×1)+(4×3)    (3×2)+(4×4)\n\n⎕←mat←2 2⍴⍳4\nmat +.× mat   ⍝ matrix product\n\n┌→──┐\n↓1 2│\n│3 4│\n└~──┘\n\n\n\n┌→────┐\n↓ 7 10│\n│15 22│\n└~────┘\n\n\n\nIn this case we are going to duplicate the ⍵ argument. Once for each element of the ⍺ argument. The first one is multiplied by the first element of the ⍺ argument. The second by the second element, etc.\n1× 4 5 6 7\n2× 4 5 6 7\n3× 4 5 6 7\n\n1 2 3 ∘.× 4 5 6 7  ⍝ Special case: outer prodct\n\n┌→──────────┐\n↓ 4  5  6  7│\n│ 8 10 12 14│\n│12 15 18 21│\n└~──────────┘\n\n\n\n\n\n\n⌹ (Domino;Quad Divide)\n\nMonadic ⌹ (Matrix Inverse Of)\n\nmat←2 2⍴⍳4\n⎕←inv←⌹ mat\n\n┌→────────┐\n↓¯2    1  │\n│ 1.5 ¯0.5│\n└~────────┘\n\n\n\n\ninv +.× mat  ⍝ Identity\n\n┌→──┐\n↓1 0│\n│0 1│\n└~──┘\n\n\n\n\n\nDyadic ⌹ (Matrix Division By)\n\n⎕←div←5 6 ⌹ mat\n\n┌→─────┐\n│¯4 4.5│\n└~─────┘\n\n\n\n\nmat +.× div\n\n┌→──┐\n│5 6│\n└~──┘"
  },
  {
    "objectID": "operators.html#custom-operators",
    "href": "operators.html#custom-operators",
    "title": "Operators and axis",
    "section": "Custom operators",
    "text": "Custom operators\n\nf ← *∘2\n\n\nd ← 0.01\nx ← 3\n((f (x+d)) - f x) ÷ d\n\n    \n6.01\n    \n\n\n\n\nd ← 0.0001\n((f (x+d)) - f x) ÷ d\n\n      \n6.0001\n      \n\n\n\n\ngrad ← {((⍺⍺ ⍺+⍵) - ⍺⍺ ⍺) ÷ ⍵}\n3 f grad 0.01\n\n    \n6.01"
  },
  {
    "objectID": "operators.html#diaeresis-and-tilde-diaeresis",
    "href": "operators.html#diaeresis-and-tilde-diaeresis",
    "title": "Operators and axis",
    "section": "Diaeresis and Tilde Diaeresis",
    "text": "Diaeresis and Tilde Diaeresis\n\n⍨ (Tilde Diaeresis)\n\ndyadic ⍨ (Commute)\nModifies the given function so its arguments are swapped.\n\n3-2\n\n \n1\n \n\n\n\n\n2-3\n\n  \n¯1\n  \n\n\n\n\n3-⍨2\n\n  \n¯1\n  \n\n\n\nNormally to use a mask to select elements the mask is the ⍺ argument to /. If we wanted to right this out we would need to calculate the mask first.\n(≠v)/v\n\nv←22 10 22 22 21 10 5 10\nv/⍨≠v\n\n┌→─────────┐\n│22 10 21 5│\n└~─────────┘\n\n\n\n\ngrad ← {⍵ ÷⍨ (⍺⍺ ⍺+⍵) - ⍺⍺ ⍺}\n3 f grad 0.01\n\n    \n6.01\n    \n\n\n\nCan also be used to reflect the ⍵ argument to become the ⍺ argument as well.\n3 × 3\n\npow ← ×⍨\npow 3\n\n \n9\n \n\n\n\n\n\ndyadic ⍨ (Constant)\n\nzero ← 0⍨\n2 zero 5\n\n \n0\n \n\n\n\n\n\n\n¨ (Diaresis)\n\nmonadic ¨ (Each)\n\n⎕ ← a ← (1 2 3 4)(5 6 7)\n\n┌→──────────────────┐\n│ ┌→──────┐ ┌→────┐ │\n│ │1 2 3 4│ │5 6 7│ │\n│ └~──────┘ └~────┘ │\n└∊──────────────────┘\n\n\n\nApply +/ to each of the elements of a. Each element is itself an array. So we sum those up.\n\n+/¨a\n\n┌→────┐\n│10 18│\n└~────┘\n\n\n\n\n⎕ ← b ← (1 2 3)(4 5 6)\n\n┌→────────────────┐\n│ ┌→────┐ ┌→────┐ │\n│ │1 2 3│ │4 5 6│ │\n│ └~────┘ └~────┘ │\n└∊────────────────┘\n\n\n\nDistribute the plus and an element to each of the elements of b.\n2 + 1 2 3\n3 + 4 5 6\n\n2 3 +¨ b\n\n┌→────────────────┐\n│ ┌→────┐ ┌→────┐ │\n│ │3 4 5│ │7 8 9│ │\n│ └~────┘ └~────┘ │\n└∊────────────────┘"
  },
  {
    "objectID": "apl.html",
    "href": "apl.html",
    "title": "Basics",
    "section": "",
    "text": "This series will explore all the different glyphs in Dyalog APL. Wherever possible examples of a glyph will exist for each glyph that do not use other glyphs. The purpose of this post is to create documentation for glyphs that are helpful for beginners getting started.\nTo get help on a glyph, such as ≠, type:\nTo get more detailed “pictures” of arrays and tacit functions type:\nThis first notebook in the series covers the basic objects."
  },
  {
    "objectID": "apl.html#some-objects",
    "href": "apl.html#some-objects",
    "title": "Basics",
    "section": "Some objects",
    "text": "Some objects\n\nReal\nNumbers are represented as they are in many other languages. Integers, negative numbers, and decimals can be created.\n\nNote: Notice that ¯ is a high bar and not the symbol normally used in many other programming languages such as python\n\n\n1\n\n \n1\n \n\n\n\n\n¯1\n\n  \n¯1\n  \n\n\n\n\n1.5\n\n   \n1.5\n   \n\n\n\n\n\nComplex\nComplex numbers can be created using j to represent the i.\n\n0j4\n\n   \n0J4\n   \n\n\n\n\n3j4\n\n   \n3J4\n   \n\n\n\n3j4 means 3+4i.\n\n4j0\n\n \n4\n \n\n\n\n4j0 means 4+0i, which is just the real number 4\n\n¯5j¯6\n\n     \n¯5J¯6\n     \n\n\n\n\n\nRank-1 arrays\nThe syntax for creating a rank-1 array is to separate elements with spaces.\n\n2 3 1\n\n┌→────┐\n│2 3 1│\n└~────┘\n\n\n\n\n2 ¯3 1\n\n┌→─────┐\n│2 ¯3 1│\n└~─────┘\n\n\n\n\n0j4 ¯5j¯6\n\n┌→────────┐\n│0J4 ¯5J¯6│\n└~────────┘\n\n\n\n\n\nArrays in arrays\nTo nest arrays we now need to use parenthesis. The parenthesis are dictating the order of operations (it’s not array specific syntax).\n\n1 2 3 4 (1 2)\n\n┌→──────────────┐\n│         ┌→──┐ │\n│ 1 2 3 4 │1 2│ │\n│         └~──┘ │\n└∊──────────────┘\n\n\n\n\n(1 2)(3 4)\n\n┌→────────────┐\n│ ┌→──┐ ┌→──┐ │\n│ │1 2│ │3 4│ │\n│ └~──┘ └~──┘ │\n└∊────────────┘\n\n\n\n\n(1 2)(3 4)5\n\n┌→──────────────┐\n│ ┌→──┐ ┌→──┐   │\n│ │1 2│ │3 4│ 5 │\n│ └~──┘ └~──┘   │\n└∊──────────────┘\n\n\n\n\n\n⍝ (Comment)\n⍝ tells apl that anything after this character on that line should be ignored and not executed. Great for writing yourself notes for what pieces of code do.\n\n⍝ This is a comment and doesn't do anything\n1 2 3 ⍝ This is a comment after some code\n\n┌→────┐\n│1 2 3│\n└~────┘"
  },
  {
    "objectID": "apl.html#basic-math-functions",
    "href": "apl.html#basic-math-functions",
    "title": "Basics",
    "section": "Basic math functions",
    "text": "Basic math functions\n\n- (Minus sign; Bar)\n\nMonadic - (Negate)\nNegate multiplies each element by ¯1. Positive numbers become negative and negative numbers become positive.\n\n- 4\n\n  \n¯4\n  \n\n\n\n\n- ¯4\n\n \n4\n \n\n\n\n\n- 4 2 0 ¯3 ¯5\n\n┌→──────────┐\n│¯4 ¯2 0 3 5│\n└~──────────┘\n\n\n\n\n¯4 2 0 ¯3 ¯5\n\n┌→───────────┐\n│¯4 2 0 ¯3 ¯5│\n└~───────────┘\n\n\n\n\n\nDyadic - (Minus; subtract)\n\n3-2\n\n \n1\n \n\n\n\nSubtracting happens element-wise.\n\n3 2 1 - 4 5 1\n\n┌→──────┐\n│¯1 ¯3 0│\n└~──────┘\n\n\n\nAPL will broadcast to make element-wise subtraction possible\n\n3 2 1 - 1\n\n┌→────┐\n│2 1 0│\n└~────┘\n\n\n\n\n1 - 3 2 1\n\n┌→──────┐\n│¯2 ¯1 0│\n└~──────┘\n\n\n\n\n\n\n+ (Plus sign)\n\nMonadic + (Conjugate)\n\n+ 1.2\n\n   \n1.2\n   \n\n\n\n\n+ ¯5j¯6\n\n    \n¯5J6\n    \n\n\n\n¯5j¯6 means ¯5+¯6i. Conjugate negates the imaginary component of complex numbers.\n\n+ 1.2 0j4 ¯5j¯6\n\n┌→────────────┐\n│1.2 0J¯4 ¯5J6│\n└~────────────┘\n\n\n\n\n\nDyadic + (Plus)\nPlus works element-wise just like minus.\n\n3+2\n\n \n5\n \n\n\n\n\n3 2 1 + 4 5 1\n\n┌→────┐\n│7 7 2│\n└~────┘\n\n\n\n\n3 2 1 + 1\n\n┌→────┐\n│4 3 2│\n└~────┘\n\n\n\n\n1 + 3 2 1\n\n┌→────┐\n│4 3 2│\n└~────┘\n\n\n\n\n\n\n| (Stile;Vertical Bar)\n\nMonadic | (Magnitude)\n\n|3 ¯3 3j4\n\n┌→────┐\n│3 3 5│\n└~────┘\n\n\n\n3j4 means 3+4i, which has a magnitude of 5 (because (3×3)+(4×4)=(5×5)).\n\n\nDyadic | (Residue;Modulus)\nResidue;Modulus works element-wise.\n\n2 divided by 7 = 3 with a remainder of 1\n10 divided by 13 = 1 Modulus 3\n2 divided by 8 = 4 Mod 0\n\n\n2 10 2 | 7 13 8\n\n┌→────┐\n│1 3 0│\n└~────┘\n\n\n\nNegative numbers can seem a bit confusing at first. Here is an article that can help you understand modulo with negative numbers.\n\n2 10 ¯2.5 | 7 ¯13 8\n\n┌→─────┐\n│1 7 ¯2│\n└~─────┘\n\n\n\n\n10 10 ¯10 ¯10 | 13 ¯13 13 ¯13\n\n┌→────────┐\n│3 7 ¯7 ¯3│\n└~────────┘\n\n\n\n\n\n\n÷ (Divide sign)\n\nMonadic ÷ (Reciprocol)\nReciprocal is division where 1 is the left argument.\n\n÷ 3 is equivalent to 1 ÷ 3\n÷ ¯2 is equivalent to 1 ÷ ¯2\n÷ 3j4 is equivalent to 1 ÷ 3j4\n\n\n÷ 3 ¯2 3j4\n\n┌→───────────────────────────┐\n│0.3333333333 ¯0.5 0.12J¯0.16│\n└~───────────────────────────┘\n\n\n\n\n\nDyadic ÷ (Divided by)\nDivided by does element-wise division\n\n3÷2\n\n   \n1.5\n   \n\n\n\n\n3÷2 2.5 ¯1\n\n┌→─────────┐\n│1.5 1.2 ¯3│\n└~─────────┘\n\n\n\n\n3 2 1÷2 2.5 ¯1\n\n┌→─────────┐\n│1.5 0.8 ¯1│\n└~─────────┘\n\n\n\n\n\n\n× (Times sign)\n\nMonadic × (Direction)\nFor real numbers: 1 for positive numbers, ¯1 for negative numbers, 0 for 0.\n\n× 3.1 ¯2 0 3j4\n\n┌→─────────────┐\n│1 ¯1 0 0.6J0.8│\n└~─────────────┘\n\n\n\nComplex numbers are divided by their magnitude. 0.6j0.8 represents a vector in the same direction as 3j4, but with a magnitude of 1, since it’s 3j4÷5.\n\n3j4÷(|3j4)\n\n       \n0.6J0.8\n       \n\n\n\n\n÷∘|⍨3j4\n\n       \n0.6J0.8\n       \n\n\n\n\n÷∘|⍨\n\n   ⍨\n ┌─┘\n ∘\n┌┴┐\n÷ |\n\n\n\n\n\nDyadic × (Times)\nElement-wise multiplication\n\n3×2\n\n \n6\n \n\n\n\n\n3×2 2.5 ¯1\n\n┌→───────┐\n│6 7.5 ¯3│\n└~───────┘\n\n\n\n\n3 2 1×2 2.5 ¯1\n\n┌→─────┐\n│6 5 ¯1│\n└~─────┘\n\n\n\n\n\n\n* (Star)\n\nMonadic * (Exponential)\nExponential takes e to the power of the input argument. * 1 is equal to e\n\n* 0 1 2\n\n┌→────────────────────────┐\n│1 2.718281828 7.389056099│\n└~────────────────────────┘\n\n\n\n\n\nDyadic * (Power)\nPower takes the left arguement and puts it to the power of the right arguement. Power is applied elementwise.\n\n49 5 ¯4 * 0.5 2 0.5\n\n┌→───────┐\n│7 25 0J2│\n└~───────┘\n\n\n\n\n\n\n! (Exclamation mark)\n\nMonadic ! (factorial)\n5 Factorial, or !5 is equal to 5×4×3×2×1.\n\n!5\n\n   \n120\n   \n\n\n\n\n!1.5  ⍝ gamma(1.5+1)\n\n           \n1.329340388\n           \n\n\n\n\n\nDyadic ! (Binomial)\nBinomial can be defined using factorial: X!Y ←→ (!Y)÷(!X)×!Y-X. R is the number of selections of X things from Y things.\n\n0 1 2 3 4 5 ! 5\n\n┌→────────────┐\n│1 5 10 10 5 1│\n└~────────────┘\n\n\n\n\n\n\n? (Question mark)\n\nMonadic ? (Roll)\nGives a random integer between 1 and the input argument or, in the case of 0, a random non-integer between 0 and 1\n\n? 6 6 6 6 6\n\n┌→────────┐\n│4 3 4 2 1│\n└~────────┘\n\n\n\n\n? 0 0\n\n┌→────────────────────────┐\n│0.5456603511 0.3390443517│\n└~────────────────────────┘\n\n\n\n\n\nDyadic ? (Deal)\nGenerates left argument number of numbers between 1 and the right argument. So 13 ? 52 will give 13 numbers between 1 and 52. Deal does sampling without replacement, meaning the same number will not show up multiple times.\n\n13 ? 52\n\n┌→──────────────────────────────────┐\n│51 50 26 10 40 4 34 2 38 8 27 42 44│\n└~──────────────────────────────────┘\n\n\n\n\n\n\n○ (Circle)\n\nMonadic ○ (Pi Times)\nMultiplies pi times the input argument.\n\n○ 0 1 2\n\n┌→────────────────────────┐\n│0 3.141592654 6.283185307│\n└~────────────────────────┘\n\n\n\n\n\nDyadic ○ (Circular Function - Trig)\nFor table of stuff ᴏ can do, see the docs. Theleft argument selects function(s) to apply. E.g 1 gives Sine ⍵, and and 2 is Cos.\n\n0 1 ○ 0\n\n┌→──┐\n│1 0│\n└~──┘\n\n\n\n\n\n\n⍟ (Logarithm; Circle Star)\n\nMonadic ⍟ (Natural Log)\nThe natural logarithm of a number is its logarithm to the base of the mathematical constant e\n\n⍟ 1 2 3 (*1)\n\n┌→───────────────────────────┐\n│0 0.6931471806 1.098612289 1│\n└~───────────────────────────┘\n\n\n\n\n\nDyadic ⍟ (Log)\nCalculates the log. 2⍟32 is equal to log2(32)\n\n2 10 ⍟ 32 1000\n\n┌→──┐\n│5 3│\n└~──┘"
  },
  {
    "objectID": "apl.html#expressions",
    "href": "apl.html#expressions",
    "title": "Basics",
    "section": "Expressions",
    "text": "Expressions\n\nPrecedence\nFunction precedence in APL is always right to left, evaluating parentheses when encountered. This means 3×2+1 does the addition first before the multiplication because addition is further right. You could change the order of operations by using parenthesis, (3×2)+1, or reordering it to 1+3×2.\n\n3×2+1\n\n \n9\n \n\n\n\nBefore functions are applied, vectors are created. 1 2 3×2 creates the vector 1 2 3 first, then applies functions right to left. The below code cell could be rewritten as (1 2 3)×2, but since the parenthesis is redundant it is often best practice to leave it off. This is often referred to as stranding having a higher binding strength than function applications.\n\n1 2 3×2\n\n┌→────┐\n│2 4 6│\n└~────┘\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nReminder: In the below examples, remember that functions are applied right to left! 1 2 3×2+1 adds 2+1 to get 3, then multiplies by the vector 1 2 3\n\n\n\n1 2 3×2+1\n\n┌→────┐\n│3 6 9│\n└~────┘\n\n\n\n\n1 2 3×2+2 4 6\n\n┌→──────┐\n│4 12 24│\n└~──────┘\n\n\n\n\n3 ¯5 + 4\n\n┌→───┐\n│7 ¯1│\n└~───┘\n\n\n\nThe next example follows the same precedence. ÷3 is done first (reciprocal 3).\n\n8*÷3\n\n \n2\n \n\n\n\n\n\nAssignment\nThe left arrow assigns to variables. a←3 is 3 is assigned to a.\n\na←3\na\n\n \n3\n \n\n\n\nThere’re 2 interesting things in the next example:\n\n⎕ is a special variable that represents the screen. By assigning a value to quad it prints to the screen.\n← follows usual precedence of right to left. 3 is assigned to a, then a is assigned to ⎕.\n\n\n⎕←a←3\n\n \n3\n \n\n\n\n\nb←3 4\nb\n\n┌→──┐\n│3 4│\n└~──┘\n\n\n\n\n\nFunctions\nSingle argument functions (monadic functions) in APL have the argument ⍵, which always is input to the right of the function. You cannot change the name of the argument. Enclosing something in curly braces is the syntax for function definition.\n\n{⍵×2} 4\n\n \n8\n \n\n\n\n\nf ← {⍵×2}\nf 4\n\n \n8\n \n\n\n\nDual argument function (dyadic functions) in APL have an additional argument ⍺, which is input to the left of the function.\n\ng ← {⍵×2+⍺}\n3 g 4\n\n  \n20\n  \n\n\n\n\nf ← {⍵×2}\nh ← {2 + f ⍵}\nh 4\n\n  \n10\n  \n\n\n\n\n⋄ (Statement separator)\nStatement separator can be used to perform a computation in multiple steps. In the below example a ← ⍵×2 is evaluated, then 2 + a is evaluated and returned.\n\nf ← {a ← ⍵×2 ⋄ 2 + a}\nf 4\n\n  \n10\n  \n\n\n\n\nf←{a←1 ⋄ 2 ⋄ 3}  ⍝ First non-assignment is the result of the function\nf 2\n\n \n2\n \n\n\n\n\n\nGuard expressions\nA guard expression allows you to specify a condition for a result.\n{⍵>1:1 ⋄ ⍵} says if ⍵ is greater than 1, then 1 else ⍵\n\nfact←{⍵>1:1 ⋄ ⍵}\n\nOther conditionals and more complex expressions can be used in guard expressions\n\nfact1←{⍵≤1:1 ⋄ ⍵×fact ⍵-1 }\n\n\nfact 1\n\n \n1\n \n\n\n\n\nfact 5\n\n \n1\n \n\n\n\n\n\n∇ Del/Nabla (Recursion)\nRecursion can be simplified using ∇.\n\n{⍵≤1:1 ⋄ ⍵×∇ ⍵-1} 5\n\n   \n120\n   \n\n\n\nThis accomplishes the same thing as the function calling itself more explicitly\n\nfact1 ← {⍵≤1:1 ⋄ ⍵×fact1 ⍵-1 }\nfact2 ← {⍵≤1:1 ⋄ ⍵×∇ ⍵-1}\n\n(fact1 1) = (fact2 1)\n(fact1 5) = (fact2 5)\n\n \n1\n \n\n\n\n \n1\n \n\n\n\n\n{⍵≤1:1 ⋄ ⍵×∇ ⍵-1} 5\n\n   \n120\n   \n\n\n\n\nfact ← {⍵≤1:1 ⋄ ⍵×∇ ⍵-1}\n\n\nfact 1\n\n \n1\n \n\n\n\n\nfact 5\n\n   \n120\n   \n\n\n\n\n\n\nDestructuring assignment\n\n(a b) ← 3 4\na\n\n3"
  },
  {
    "objectID": "apl.html#array-rank",
    "href": "apl.html#array-rank",
    "title": "Basics",
    "section": "Array rank",
    "text": "Array rank\n\n⍴ (rho)\n\nDyadic ⍴ (reshape)\nBy default a series of numbers creates a 1 dimensional vector\n\n⎕ ← 1 2 3 4 5 6\n\n┌→──────────┐\n│1 2 3 4 5 6│\n└~──────────┘\n\n\n\nThe ⍴ function can reshape it into the specified shape.\n\na ← 1 2 3 4 5 6\n⎕←mat←2 3 ⍴ a\n\n┌→────┐\n↓1 2 3│\n│4 5 6│\n└~────┘\n\n\n\n\na ← 1 2 3 4 5 6\n3 2 ⍴ a\n\n┌→──┐\n↓1 2│\n│3 4│\n│5 6│\n└~──┘\n\n\n\n\na ← 1 2 3 4 5 6\n1 6 ⍴ a\n\n┌→──────────┐\n↓1 2 3 4 5 6│\n└~──────────┘\n\n\n\nReshape will broadcast the original vector as needed to create the desired shape.\n\na ← 1 2 3 4 5 6\n⎕←c←2 2 3 ⍴ a\n\n┌┌→────┐\n↓↓1 2 3│\n││4 5 6│\n││     │\n││1 2 3│\n││4 5 6│\n└└~────┘\n\n\n\n\n2 3 ⍴ 1\n\n┌→────┐\n↓1 1 1│\n│1 1 1│\n└~────┘\n\n\n\n\n\nMonadic ⍴ (shape of)\nThe mondadic ⍴ tells you what the shape is.\n\na ← 1 2 3 4 5 6\n⍴a\n\n┌→┐\n│6│\n└~┘\n\n\n\n\nmat←2 3 ⍴ a\n⍴mat\n\n┌→──┐\n│2 3│\n└~──┘\n\n\n\nThe shape of a scalar is the empty vector.\n\n⍴3\n\n┌⊖┐\n│0│\n└~┘\n\n\n\n\n⍬\n\n┌⊖┐\n│0│\n└~┘\n\n\n\n\n⍴⍬\n\n┌→┐\n│0│\n└~┘\n\n\n\n\nmat←2 3 ⍴ a\n⍴⍴mat\n\n┌→┐\n│2│\n└~┘\n\n\n\n\nmat←2 3 ⍴ a\n⍴⍴⍴mat\n\n┌→┐\n│1│\n└~┘\n\n\n\n\nc←2 2 3 ⍴ a\n⍴c\n\n┌→────┐\n│2 2 3│\n└~────┘\n\n\n\n\nc←2 2 3 ⍴ a\n⍴⍴⍴c\n\n┌→┐\n│1│\n└~┘\n\n\n\nThe boxes around the numbers have special meanings that are useful. The Display Conventions section covers the special meanings (6.4.1 in the Mastering Dyalog APL book). For convenience we have put the text of that section below.\nThe upper-left corner of the box provides information about the shape of the displayed value:\n\na single horizontal arrow for a vector\ntwo (or more) arrows for a matrix or higher rank arrays\nno arrow at all for scalars containing nested values, a concept we haven’t seen up to now\n\nThe bottom-left corner of the box provides information about the contents of the array:\n\n~ means that the array contains only numeric values\n_ means that the array contains only characters\n+ is used for mixed arrays\n∮ means that the array contains other arrays: it is a nested array"
  },
  {
    "objectID": "apl.html#strings-characters-and-character-vectors",
    "href": "apl.html#strings-characters-and-character-vectors",
    "title": "Basics",
    "section": "Strings (characters and character vectors)",
    "text": "Strings (characters and character vectors)\nA series of characters creates a character vector whose length is the number of characters in it\n\n'ACF'\n\n┌→──┐\n│ACF│\n└───┘\n\n\n\n\n⍴'ACF'\n\n┌→┐\n│3│\n└~┘\n\n\n\n\n'A' 'C' 'F'\n\n┌→──┐\n│ACF│\n└───┘\n\n\n\nA single character is a scalar, and like other scalars has an empty shape.\n\n⍴'y'\n\n┌⊖┐\n│0│\n└~┘\n\n\n\n\n⍴'your boat'\n\n┌→┐\n│9│\n└~┘\n\n\n\n\n1 2 3 4 'a'\n\n┌→────────┐\n│1 2 3 4 a│\n└+────────┘\n\n\n\nBecause a series of strings is a vector, putting it in another array creates a nested array.\n\n1 2 3 4 'ab'\n\n┌→─────────────┐\n│         ┌→─┐ │\n│ 1 2 3 4 │ab│ │\n│         └──┘ │\n└∊─────────────┘\n\n\n\n\n(1 2)(3 4)'ab'\n\n┌→─────────────────┐\n│ ┌→──┐ ┌→──┐ ┌→─┐ │\n│ │1 2│ │3 4│ │ab│ │\n│ └~──┘ └~──┘ └──┘ │\n└∊─────────────────┘\n\n\n\nThere is a pre-defined variable that gives all the letters of the alphabet provided for convenience.\n\n⎕A\n\n┌→─────────────────────────┐\n│ABCDEFGHIJKLMNOPQRSTUVWXYZ│\n└──────────────────────────┘"
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "Python equivalents",
    "section": "",
    "text": "def add1(x): return x+1\nadd1(3)\n\n4\n\n\nA function that returns a function:\n\ndef logargs(f):\n    \"Print arguments to `f` before calling it\"\n    def _inner(*args, **kwargs):\n        print(f\"Received: {args=}; {kwargs=}\")\n        return f(*args, **kwargs)\n    return _inner\n\nUsing logargs to modify a function:\n\ndef _mult2(x): return x*2\nmult2 = logargs(_mult2)\nmult2(3)\n\nReceived: args=(3,); kwargs={}\n\n\n6\n\n\nExactly the same thing but using a decorator as syntax sugar:\n\n@logargs\ndef mult2(x): return x*2\nmult2(3)\n\nReceived: args=(3,); kwargs={}\n\n\n6\n\n\nA class that takes a function and returns a function:\n\nclass logargs:\n    def __init__(self, prefix='Received: '): self.prefix=prefix\n    def __call__(self, f):        \n        def _inner(*args, **kwargs):\n            print(f\"{self.prefix}{args=}; {kwargs=}\")\n            return f(*args, **kwargs)\n        return _inner\n\nHere’s how to use it:\n\ndef _add1(x): return x+1\no = logargs('Logging: ')\nadd1 = o(_add1)\nadd1(3)\n\nLogging: args=(3,); kwargs={}\n\n\n4\n\n\nExactly the same thing but using a decorator as syntax sugar:\n\n@logargs('Logging: ')\ndef add1(x): return x+1\nadd1(3)\n\nLogging: args=(3,); kwargs={}\n\n\n4"
  },
  {
    "objectID": "python.html#partial",
    "href": "python.html#partial",
    "title": "Python equivalents",
    "section": "partial",
    "text": "partial\n\nfrom functools import partial\n\n\ndef pow(x,y): return x**y\npow(3,2)\n\n9\n\n\n\nsquared = partial(pow, y=2)\nsquared(3)\n\n9"
  }
]